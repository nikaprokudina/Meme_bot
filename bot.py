#Timer 2 —Ä–∞–±–æ—á–∏–µ
import telebot
import random
import string
import math
from telebot import types
from io import BytesIO
from PIL import Image
import requests
import concurrent.futures
import io
import threading
import sqlite3

import decimal
import hashlib
from urllib import parse
from collections import OrderedDict
import datetime
import copy




bot = telebot.TeleBot("6227889329:AAHP40wbfEJ0ZWgMCb7tqGBT9DoDtLWfOKY")
#bot = telebot.TeleBot("6478379933:AAG_OaYSRm0vZDIT565vT4aON5v6_oyFtmU") #guy



# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games = {}
cards_on_table = {}
battle_cards = {} #–≥–æ–ª–æ—Å–∞ –∑–∞ –∫–∞—Ä—Ç—ã
kolvo_players_that_send_mem = {}
voted_players = {}
players_order = {}
id_and_names = {} #–ø–æ id –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞

photo_bar_players = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
message_list_of_players = {}
usernames = {}
rating = {} #–¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –º–∞–ª–æ, —Ç–æ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å –±–æ—Ç
flag_vse_progolos = {}
flag_pl_otpravil = {}
messages_ids = {}
all_combined_images = {}
blank_table = {} #–ø—É—Å—Ç–æ–π —Å—Ç–æ–ª –≥–æ–ª—Å–æ–≤–∞–Ω–∏—è
chosen_photos = {}
#chosen_memes = {}
players_hand = {}

#–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã meme 0,1,2,3,4
all_available_tarifs_memes = {}
nazat_tarifs_memes = {}

all_available_tarifs_sit = {}
nazat_tarifs_sit = {}

deck_of_sit_cards = {}
trash_sit = {}

deck_of_meme_cards = {} #–∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç –º–µ–º–æ–≤ –≤ –∏–≥—Ä–µ
trash_memes = {} #—Å–±—Ä–æ—Å –º–µ–º–æ–≤

#–∑–∞–ø–æ–Ω–∏–º–Ω–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ä–∞—É–Ω–¥–∞
remember_players = {}

mozno_li_nazat_gotovo = {}
mozno_obnovlat = {}

ids_chose_lots_all = {} #—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö id —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—ã–±–æ—Ä–æ–º –ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–∏—Ç—å
now_obnov = {} #—Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ ids_3_otmena –æ—Ç–º–µ–Ω–∞ –∏–ª–∏ –æ–±–Ω–æ–≤—Ç—å

ids_3_otmena = {}
robocassa_first_time = {} #bool –Ω–∞–∂–∞—Ç–∞ –ª–∏ —Ä–æ–±–æ–∫–∞—Å—Å–∞ –∏–ª–∏ –Ω–µ—Ç

ids_3_gotovo = {} #—Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è 3 id —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–≤—ã–±–æ—Ä –º–µ–º–æ–≤ –∏ —Å–∏—Ç—É–∞—Ü–∏–π) + –∫–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–æ
mozno_nazad_v_menu = {}



# –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ–≤–∞—Ä—é message_list_of_players
message_list_lock = threading.Lock()

def send_message_to_players(game_code, message):
    players = active_games[game_code]['players']
    for player_id in players:
        bot.send_message(player_id, message)

def create_players_message(game_code, creator_id):
    players = active_games[game_code]['players']
    users = active_games[game_code]['usernames']
    name = id_and_names[game_code][creator_id]
    message = "–ò–≥—Ä–æ–∫–∏:\n" + "\n".join(users)

    #message = f"–ò–≥—Ä–æ–∫–∏:\n{name}"
    mes = bot.send_message(creator_id, message)
    message_id = mes.message_id
    with message_list_lock:
        message_list_of_players[game_code] = {}
        message_list_of_players[game_code][creator_id] = message_id


def update_players_message(game_code, new_player_id, creator_name):
    players = active_games[game_code]['players']
    users = active_games[game_code]['usernames']

    message = "–ò–≥—Ä–æ–∫–∏:\n" + "\n".join(users)

    for player_id in players:
        if new_player_id == player_id:
            if len(players) > 1:
                bot.send_message(player_id, text=f"–í—ã –≤–æ—à–ª–∏ –≤ –∏–≥—Ä—É —Å –∫–æ–¥–æ–º {game_code}!")
            mes = bot.send_message(player_id, message)
            message_id = mes.message_id
            if len(players) > 1:
                bot.send_message(player_id, text=f"–ñ–¥—ë–º, –∫–æ–≥–¥–∞ –≤—Å–µ –∑–∞–π–¥—É—Ç –∏ {creator_name} –∑–∞–ø—É—Å—Ç–∏—Ç –∏–≥—Ä—É")


            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è
            with message_list_lock:
                message_list_of_players[game_code][new_player_id] = message_id
        else:
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è
            with message_list_lock:
                message_id = message_list_of_players[game_code].get(player_id)

            if message_id is not None:
                bot.edit_message_text(chat_id=player_id, message_id=message_id, text=message)


def generate_game_code():
    code = ''.join(random.choices(string.digits, k=6))
    #return code
    return "000000"



# —Å—Ç–∞—Ä—Ç: –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    new_game_button = types.InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")
    join_game_button = types.InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="join_game")
    rules_button = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data="rules")
    markup.add(new_game_button, join_game_button, rules_button)
    bot.send_message(message.chat.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –º–µ–º–æ–±–æ—Ç:)", reply_markup=markup)


#–≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –µ—Å–ª–∏ —É—à—ë–ª –∫—Ä–∏—ç–π—Ç–æ—Ä
@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('menu:'))
def main_menu(callback_query):
    data = callback_query.data.split(':')
    player_id = callback_query.from_user.id
    game_code = data[1]
    #—É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_id = callback_query.message.message_id
    bot.delete_message(player_id, message_id)

    if game_code in active_games and player_id == active_games[game_code]['creator']:
        delete_stuff(game_code)

        del id_and_names[game_code]

        del all_available_tarifs_memes[game_code]
        del nazat_tarifs_memes[game_code]
        del all_available_tarifs_sit[game_code]
        del nazat_tarifs_sit[game_code]
        del deck_of_sit_cards[game_code]
        del trash_sit[game_code]
        del deck_of_meme_cards[game_code]
        del trash_memes[game_code]


    markup = types.InlineKeyboardMarkup(row_width=1)
    new_game_button = types.InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")
    join_game_button = types.InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="join_game")
    rules_button = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data="rules")
    markup.add(new_game_button, join_game_button, rules_button)
    bot.send_message(player_id, text="–ê –Ω—É-–∫–∞, –≤—ã–±–∏—Ä–∞–π", reply_markup=markup)

# –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda message: message.data == 'rules')
def rules(message):
    message_id = message.message.message_id
    player_id = message.message.chat.id
    bot.delete_message(player_id, message_id)

    game_code = -1
    callback_data_leave = f"menu:{game_code}"
    markup = types.InlineKeyboardMarkup(row_width=1)
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=callback_data_leave)
    markup.add(back_button)
    bot.send_message(player_id, f"–ª—è–ª—è —Ç—É—Ç –±—É–¥—É—Ç –ø—Ä–∞–≤–∏–ª–∞", reply_markup=markup)


#—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —é–∑–µ—Ä–∞
def get_user_subscriptions(user_id):
    connect = sqlite3.connect("db.db")
    cursor = connect.cursor()

    cursor.execute('SELECT * FROM subscriptions WHERE user_id = ?', (user_id,))
    user_subscriptions = cursor.fetchall()

    connect.close()
    return user_subscriptions

@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('meme_tarif:'))
def chose_tarif_meme(callback_query):
    with message_list_lock:
        global all_available_tarifs_memes
        global nazat_tarifs_memes
        data = callback_query.data.split(':')
        player_id = callback_query.from_user.id
        game_code = data[1]
        button = int(data[2])

        #—É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_id = callback_query.message.message_id
        #bot.delete_message(player_id, message_id)
        if button not in all_available_tarifs_memes[game_code]:
            robocassa(player_id, button, game_code)
        else:
            if button not in nazat_tarifs_memes[game_code]: #–∫–Ω–æ–ø–∫–∞ –Ω–µ–Ω–∞–∂–∞—Ç–∞ -> –Ω–∞–∂–∞—Ç–∞ = –∑–µ–ª–µ–Ω—ã–π
                nazat_tarifs_memes[game_code].append(button)
            else: #–∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞, —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç -> –±–µ–ª—ã–π
                nazat_tarifs_memes[game_code].remove(button)
            logos = []
            for number in range(5): #–ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º
                if number in nazat_tarifs_memes[game_code]: #–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π
                    logos.append("üü¢Ô∏è ")
                elif number in all_available_tarifs_memes[game_code]: #–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –Ω–µ –Ω–∞–∂–∞—Ç–∞ (–±–µ–ª—ã–π)
                    logos.append("‚ö™Ô∏è ")
                else: #–∑–∞–º–æ–∫
                    logos.append("üí∞")

            # –≤—ã–±–æ—Ä –º–µ–º–æ–≤
            demo_meme = f"meme_tarif:{game_code}:{0}"
            base_meme = f"meme_tarif:{game_code}:{1}"
            cccp_meme = f"meme_tarif:{game_code}:{2}"
            cats_meme = f"meme_tarif:{game_code}:{3}"
            neiro_meme = f"meme_tarif:{game_code}:{4}"
            markup = types.InlineKeyboardMarkup(row_width=2)
            demo = types.InlineKeyboardButton(f"{logos[0]}–î–µ–º–∫–∞ (–ø–æ 10 –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç–æ–≤)", callback_data=demo_meme)
            base = types.InlineKeyboardButton(f"{logos[1]}–ë–∞–∑–∞ (250 —à—Ç.)", callback_data=base_meme)
            cccp = types.InlineKeyboardButton(f"{logos[2]}–°–°–°–† (250 —à—Ç.)", callback_data=cccp_meme)
            cats = types.InlineKeyboardButton(f"{logos[3]}–ö–æ—Ç–∏–∫–∏ (250 —à—Ç.)", callback_data=cats_meme)
            neiro = types.InlineKeyboardButton(f"{logos[4]}–ù–ï–ô–†–û (250 —à—Ç.)", callback_data=neiro_meme)
            markup.row(demo)
            markup.add(base, cccp, cats, neiro)
            #bot.send_message(player_id, text=f"–ü—Ä–∏—è—Ç–µ–ª—å, —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –º–µ–º–æ–≤-–∫–∞—Ä—Ç–∏–Ω–æ–∫:", reply_markup=markup)
            '''for i in nazat_tarifs_memes[game_code]:
                bot.send_message(player_id, str(i))
            bot.send_message(player_id, "---")'''
            bot.edit_message_text(chat_id=player_id, message_id=callback_query.message.message_id, text="–ü—Ä–∏—è—Ç–µ–ª—å, —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –º–µ–º–æ–≤-–∫–∞—Ä—Ç–∏–Ω–æ–∫:",
                                  reply_markup=markup)
            #bot.edit_message_text(chat_id=player_id, message_id=message_id, text=f"–ü—Ä–∏—è—Ç–µ–ª—å, —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –º–µ–º–æ–≤-–∫–∞—Ä—Ç–∏–Ω–æ–∫:", reply_markup=markup)


#–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
def calculate_signature(*args) -> str:
    """Create signature MD5.
    """
    return hashlib.md5(':'.join(str(arg) for arg in args).encode()).hexdigest()


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø–ª–∞—Ç—É.

def generate_payment_link(
    merchant_login: str,  # Merchant login
    merchant_password_1: str,  # Merchant password
    cost: decimal,  # Cost of goods, RU
    InvId: int,  # Invoice number
    description: str,  # Description of the purchase
    is_test = 1,
    robokassa_payment_url = 'https://auth.robokassa.ru/Merchant/Index.aspx',
) -> str:
    """URL for redirection of the customer to the service.
    """
    signature = calculate_signature(
        merchant_login,
        cost,
        InvId,
        merchant_password_1
    )

    data = {
        'MerchantLogin': merchant_login,
        'OutSum': cost,
        'InvId': InvId,
        'Description': description,
        'SignatureValue': signature,
        'IsTest': is_test
    }
    return f'{robokassa_payment_url}?{parse.urlencode(data)}'



all_names_of_tarifs = ['–î–µ–º–∫–∞', '–ú–ï–ú–´: –í–µ—Å–µ–ª–æ –∏ –≤ —Ç–æ—á–∫—É!', '–ú–ï–ú–´ 2: –°–°–°–† –∏ 90-–µ', '–ú–ï–ú–´ 3: –ö–æ—Ç–∏–∫–∏ –∏ –ø—Ä. –Ω–µ–ª—é–¥–∏', '–ú–ï–ú–´ –ù–ï–ô–†–û']


#—Ä–æ–±–æ–∫–∞—Å—Å–∞ (–º–µ–Ω—é—à–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ª–æ—Ç–æ–≤)

def robocassa(user_id, button, game_code):
    global ids_3_otmena
    #–¥–ª–∏–Ω–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞, —é–∑–µ—Ä–Ω–µ–π–º, –¥–ª–∏–Ω–∞ —á–∏—Å–ª–∞ –∫–Ω–æ–ø–∫–∏, –∫–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏(–Ω–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ–∞)
    len_user = len(str(user_id))
    if button >= 10:
        len_button = 2
    else:
        len_button = 1
    for_all = str(len_user) + str(user_id) + str(len_button) + str(button)
    #–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö –Ω–∞–±–æ—Ä, –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç 100
    full_len_button = 3
    full_for_all = str(len_user) + str(user_id) + str(full_len_button) + str(100)

    #—É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ
    if robocassa_first_time[game_code]:
        gotovo_id = ids_3_gotovo[game_code][2]
        ids_3_gotovo[game_code].pop()
        bot.delete_message(user_id, gotovo_id)

    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ 1 –¥–µ–Ω—å (–ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–∞—è)
    payment_link_day = generate_payment_link(
        merchant_login="memesparty",
        merchant_password_1="economicustest1",
        cost=decimal.Decimal("0"),
        InvId=int(for_all + str(1)),  # –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ö–∏—Ç—Ä–æ
        description="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ ROBOKASSA"
    )

    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü (–ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–∞—è)
    payment_link_month = generate_payment_link(
        merchant_login="memesparty",
        merchant_password_1="economicustest1",
        cost=decimal.Decimal("0"),
        InvId=int(for_all + str(30)),  # –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ö–∏—Ç—Ä–æ
        description="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ ROBOKASSA"
    )

    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ 1 –≥–æ–¥ (–ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–∞—è)
    payment_link_year = generate_payment_link(
        merchant_login="memesparty",
        merchant_password_1="economicustest1",
        cost=decimal.Decimal("0"),
        InvId=int(for_all + str(365)),  # –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ö–∏—Ç—Ä–æ
        description="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ ROBOKASSA"
    )

    # full –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ 1 –¥–µ–Ω—å (–ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–∞—è)
    full_payment_link_day = generate_payment_link(
        merchant_login="memesparty",
        merchant_password_1="economicustest1",
        cost=decimal.Decimal("0"),
        InvId=int(full_for_all + str(1)),  # –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ö–∏—Ç—Ä–æ
        description="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ ROBOKASSA"
    )

    # full_ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü (–ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–∞—è)
    full_payment_link_month = generate_payment_link(
        merchant_login="memesparty",
        merchant_password_1="economicustest1",
        cost=decimal.Decimal("0"),
        InvId=int(full_for_all + str(30)),  # –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ö–∏—Ç—Ä–æ
        description="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ ROBOKASSA"
    )

    # full_ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ 1 –≥–æ–¥ (–ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–∞—è)
    full_payment_link_year = generate_payment_link(
        merchant_login="memesparty",
        merchant_password_1="economicustest1",
        cost=decimal.Decimal("0"),
        InvId=int(full_for_all + str(365)),  # –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ö–∏—Ç—Ä–æ
        description="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ ROBOKASSA"
    )

    keyboard_1 = telebot.types.InlineKeyboardMarkup()
    pay_button_day = types.InlineKeyboardButton(text=f"–¥–µ–Ω—å: 100 ‚ÇΩ.", url=payment_link_day)
    pay_button_month = telebot.types.InlineKeyboardButton(text=f"–º–µ—Å: 300 ‚ÇΩ.",
                                                    url=payment_link_month)
    pay_button_year = telebot.types.InlineKeyboardButton(text=f"–≥–æ–¥: 900 ‚ÇΩ.",
                                                    url=payment_link_year)
    keyboard_1.add(pay_button_day, pay_button_month, pay_button_year)
    if button == 1:
        emoji = "üéØ"
    elif button == 2:
        emoji = "üï∫"
    elif button == 3:
        emoji = "üòª"
    else:
        emoji = "‚ö°Ô∏è"
    if not robocassa_first_time[game_code]:
        try:
            message_1 = bot.edit_message_text(chat_id=user_id, message_id=ids_3_otmena[game_code][0],
                                         text=f"–ö—É–ø–∏—Ç—å <b>–¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç—É ¬´{all_names_of_tarifs[button]}{emoji}¬ª</b> (250 –º–µ–º–æ–≤ + 100 —Å–∏—Ç—É–∞—Ü–∏–π) –Ω–∞ –ø–µ—Ä–∏–æ–¥:",
                                         reply_markup=keyboard_1, parse_mode="HTML")
            message_1_id = ids_3_otmena[game_code][0]
        except:
            message_1_id = ids_3_otmena[game_code][0]
    else:
        message_1 = bot.send_message(user_id, text=f"–ö—É–ø–∏—Ç—å <b>–¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç—É ¬´{all_names_of_tarifs[button]}{emoji}¬ª</b> (250 –º–µ–º–æ–≤ + 100 —Å–∏—Ç—É–∞—Ü–∏–π) –Ω–∞ –ø–µ—Ä–∏–æ–¥:", reply_markup=keyboard_1, parse_mode="HTML")
        message_1_id = message_1.message_id


    keyboard_2 = telebot.types.InlineKeyboardMarkup()
    pay_button_day = telebot.types.InlineKeyboardButton(text=f"–¥–µ–Ω—å: 600 ‚ÇΩ.",
                                                        url=full_payment_link_day)
    pay_button_month = telebot.types.InlineKeyboardButton(text=f"–º–µ—Å: 1800 ‚ÇΩ.",
                                                          url=full_payment_link_month)
    pay_button_year = telebot.types.InlineKeyboardButton(text=f"–≥–æ–¥: 5400 ‚ÇΩ.",
                                                         url=full_payment_link_year)
    keyboard_2.add(pay_button_day, pay_button_month, pay_button_year)
    if not robocassa_first_time[game_code]:
        message_2_id = ids_3_otmena[game_code][1]
    else:
        message_2 = bot.send_message(user_id,
                     text="–ö—É–ø–∏—Ç—å <b>–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</b> –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏ –±—É–¥—É—â–∏–º —Å–µ—Ç–∞–º –Ω–∞ –ø–µ—Ä–∏–æ–¥:",
                     reply_markup=keyboard_2, parse_mode="HTML")
        message_2_id = message_2.message_id

    #call_data = f"otmena_pokupki:{game_code}"
    call_data = f"pay_mem:{game_code}"
    markup = types.InlineKeyboardMarkup(row_width=1)
    mozno_obnovlat[game_code] = True
    chestno = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã", callback_data=call_data)
    markup.row(chestno)

    if not robocassa_first_time[game_code]:
        message_3_id = ids_3_otmena[game_code][2]
    else:
        robocassa_first_time[game_code] = False
        message_3 = bot.send_message(chat_id=user_id, text="–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
        message_3_id = message_3.message_id


    ids_3_otmena[game_code] = [message_1_id, message_2_id, message_3_id]




@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('pay_mem:'))
def payment(callback_query):
    global now_obnov
    global mozno_li_nazat_gotovo
    data = callback_query.data.split(':')
    game_code = data[1]
    player_id = callback_query.from_user.id
    if mozno_obnovlat[game_code]:
        mozno_obnovlat[game_code] = False
        # —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for mes_id in ids_3_gotovo[game_code]:
            bot.delete_message(player_id, mes_id)
        for mes_id in ids_3_otmena[game_code]:
            bot.delete_message(player_id, mes_id)
        ids_3_otmena[game_code] = []
        ids_3_gotovo[game_code] = []

        # –≤—ã—Å—ã–ª–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –≥–æ—Ç–æ–≤–æ
        message_id_1, message_id_2 = chose_deck_of_cards(player_id, game_code)
        ids_3_gotovo[game_code].append(message_id_1)
        ids_3_gotovo[game_code].append(message_id_2)

        markup = types.InlineKeyboardMarkup(row_width=1)
        callback_data_podtverdit = f"podtverdit:{game_code}"
        mozno_li_nazat_gotovo[game_code] = True
        podtverdit_choice = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ!", callback_data=callback_data_podtverdit)
        now_obnov[game_code] = False
        robocassa_first_time[game_code] = True
        markup.add(podtverdit_choice)
        message = bot.send_message(player_id, "–ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å –∫–æ–ª–æ–¥—ã, –∂–º–∏", reply_markup=markup)
        message_id = message.message_id

        ids_3_gotovo[game_code].append(message_id)  # –¥–æ–±–∞–≤–∏–ª–∏ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–º id —Å–æ–æ–±—â–µ–Ω–∏—è "–≥–æ—Ç–æ–≤–æ"




@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('otmena_pokupki:'))
def payment(callback_query):
    global mozno_li_nazat_gotovo
    global now_obnov
    data = callback_query.data.split(':')
    game_code = data[1]
    player_id = callback_query.from_user.id

    # —É–¥–∞–ª—è–µ–º 3 —Å–æ–æ–±—â–µ–Ω–∏—è
    for id_mess in ids_3_otmena[game_code]:
        bot.delete_message(player_id, id_mess)
    ids_3_otmena[game_code] = []

    # –≤—ã—Å—ã–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –º–∞—Å—Å–∏–≤
    markup = types.InlineKeyboardMarkup(row_width=1)
    callback_data_podtverdit = f"podtverdit:{game_code}"
    mozno_li_nazat_gotovo[game_code] = True
    podtverdit_choice = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ!", callback_data=callback_data_podtverdit)
    now_obnov[game_code] = False
    robocassa_first_time[game_code] = True
    markup.add(podtverdit_choice)
    message = bot.send_message(player_id, "–ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å –∫–æ–ª–æ–¥—ã, –∂–º–∏", reply_markup=markup)
    message_id = message.message_id
    ids_3_gotovo[game_code].append(message_id)  # –¥–æ–±–∞–≤–∏–ª–∏ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–º id —Å–æ–æ–±—â–µ–Ω–∏—è "–≥–æ—Ç–æ–≤–æ"


@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, 'Successful payment')


#—Å–∏—Ç—É–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('sit_tarif:'))
def chose_tarif_sit(callback_query):
    with message_list_lock:
        global all_available_tarifs_sit
        global nazat_tarifs_sit
        data = callback_query.data.split(':')
        player_id = callback_query.from_user.id
        game_code = data[1]
        button = int(data[2])



        if button not in all_available_tarifs_sit[game_code]:
            #bot.send_message(player_id, "–≠—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –•–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å: –µ–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å!")
            #—Ä–æ–±–æ–∫–∞—Å—Å–∞
            robocassa(player_id, button, game_code)
        else:
            if button not in nazat_tarifs_sit[game_code]: #–∫–Ω–æ–ø–∫–∞ –Ω–µ–Ω–∞–∂–∞—Ç–∞ -> –Ω–∞–∂–∞—Ç–∞ = –∑–µ–ª–µ–Ω—ã–π
                nazat_tarifs_sit[game_code].append(button)
            else: #–∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞, —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç -> –±–µ–ª—ã–π
                nazat_tarifs_sit[game_code].remove(button)
            logos = []
            for number in range(5): #–ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º
                if number in nazat_tarifs_sit[game_code]: #–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π
                    logos.append("üü¢Ô∏è ")
                elif number in all_available_tarifs_sit[game_code]: #–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –Ω–µ –Ω–∞–∂–∞—Ç–∞ (–±–µ–ª—ã–π)
                    logos.append("‚ö™Ô∏è ")
                else: #–∑–∞–º–æ–∫
                    logos.append("üí∞")

            # –≤—ã–±–æ—Ä –º–µ–º–æ–≤
            demo_sit = f"sit_tarif:{game_code}:{0}"
            base_sit = f"sit_tarif:{game_code}:{1}"
            cccp_sit = f"sit_tarif:{game_code}:{2}"
            cats_sit = f"sit_tarif:{game_code}:{3}"
            neiro_sit = f"sit_tarif:{game_code}:{4}"
            markup = types.InlineKeyboardMarkup(row_width=2)
            demo = types.InlineKeyboardButton(f"{logos[0]}–î–µ–º–∫–∞ (–ø–æ 10 –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç–æ–≤)", callback_data=demo_sit)
            base = types.InlineKeyboardButton(f"{logos[1]}–ë–∞–∑–∞ (100 —à—Ç.)", callback_data=base_sit)
            cccp = types.InlineKeyboardButton(f"{logos[2]}–°–°–°–† (100 —à—Ç.)", callback_data=cccp_sit)
            cats = types.InlineKeyboardButton(f"{logos[3]}–ö–æ—Ç–∏–∫–∏ (100 —à—Ç.)", callback_data=cats_sit)
            neiro = types.InlineKeyboardButton(f"{logos[4]}–ù–ï–ô–†–û (100 —à—Ç.)", callback_data=neiro_sit)
            markup.row(demo)
            markup.add(base, cccp, cats, neiro)
            bot.edit_message_text(chat_id=player_id, message_id=callback_query.message.message_id, text=f"–ò –µ—â—ë –ø–æ—Ç—Ä—É–¥–∏—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã —Å–∏—Ç—É–∞—Ü–∏–π:",
                                  reply_markup=markup)



#–≤—ã–±–æ—Ä –∫–æ–ª–æ–¥—ã –º–µ–º–æ–≤ –∏ —Å–∏—Ç—É–∞—Ü–∏–π
def chose_deck_of_cards(player_id, game_code):
    global all_available_tarifs_memes
    global nazat_tarifs_memes

    global all_available_tarifs_sit
    global nazat_tarifs_sit
    # 0-id, 1-name, 2-tarif, 3-data

    #add(player_id, "sakuharo", "+", "10.08.2024 15:30:00")
    #add(player_id, "sakuharo", "–ö–æ—Ç–∏–∫–∏", "10.08.2021 15:30:00")
    # —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–≥—Ä–æ–∫–∞
    user_subscriptions = get_user_subscriptions(player_id)
    '''for i in user_subscriptions:
        bot.send_message(player_id, str(i))'''
    nazat_tarifs_memes[game_code] = [0]
    nazat_tarifs_sit[game_code] = [0]

    #–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã 0,1,2,3,4
    all_available_tarifs_memes[game_code] = [0]
    all_available_tarifs_sit[game_code] = [0]

    # –≤—ã–±–æ—Ä –º–µ–º–æ–≤
    demo_meme = f"meme_tarif:{game_code}:{0}"
    base_meme = f"meme_tarif:{game_code}:{1}"
    cccp_meme = f"meme_tarif:{game_code}:{2}"
    cats_meme = f"meme_tarif:{game_code}:{3}"
    neiro_meme = f"meme_tarif:{game_code}:{4}"
    markup = types.InlineKeyboardMarkup(row_width=2)
    demo = types.InlineKeyboardButton("üü¢Ô∏è –î–µ–º–∫–∞ (–ø–æ 10 –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç–æ–≤)", callback_data=demo_meme)
    # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –≤–æ–æ–±—â–µ –Ω–µ—Ç
    if not user_subscriptions:
        base = types.InlineKeyboardButton("üí∞–ë–∞–∑–∞ (250 —à—Ç.)", callback_data=base_meme)
        cccp = types.InlineKeyboardButton("üí∞–°–°–°–† (250 —à—Ç.)", callback_data=cccp_meme)
        cats = types.InlineKeyboardButton("üí∞–ö–æ—Ç–∏–∫–∏ (250 —à—Ç.)", callback_data=cats_meme)
        neiro = types.InlineKeyboardButton("üí∞–ù–ï–ô–†–û (250 —à—Ç.)", callback_data=neiro_meme)
    # –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á—Ç–æ-—Ç–æ
    else:
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        current_datetime = datetime.datetime.now()

        tarifs_and_data = {} #—Ç–∞—Ä–∏—Ñ—ã - –∫–ª—é—á–∏, –¥–∞—Ç—ã-values
        for raw in user_subscriptions:
            #–¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ
            if raw[2] not in tarifs_and_data:
                tarifs_and_data[raw[2]] = [raw[3]]
            #–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å –¥–∞—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            else:
                tarifs_and_data[raw[2]].append(raw[3])
                tarifs_and_data[raw[2]].sort()
        if "–ë–∞–∑–∞" in tarifs_and_data and datetime.datetime.strptime(tarifs_and_data["–ë–∞–∑–∞"][-1], "%d.%m.%Y %H:%M:%S") > current_datetime:
            base = types.InlineKeyboardButton("‚ö™Ô∏è –ë–∞–∑–∞ (250 —à—Ç.)", callback_data=base_meme)
            all_available_tarifs_memes[game_code].append(1)
        else:
            base = types.InlineKeyboardButton("üí∞–ë–∞–∑–∞ (250 —à—Ç.)", callback_data=base_meme)
        if "–°–°–°–†" in tarifs_and_data and datetime.datetime.strptime(tarifs_and_data["–°–°–°–†"][-1], "%d.%m.%Y %H:%M:%S") > current_datetime:
            cccp = types.InlineKeyboardButton("‚ö™Ô∏è –°–°–°–† (250 —à—Ç.)", callback_data=cccp_meme)
            all_available_tarifs_memes[game_code].append(2)
        else:
            cccp = types.InlineKeyboardButton("üí∞–°–°–°–† (250 —à—Ç.)", callback_data=cccp_meme)
        if "–ö–æ—Ç–∏–∫–∏" in tarifs_and_data and datetime.datetime.strptime(tarifs_and_data["–ö–æ—Ç–∏–∫–∏"][-1], "%d.%m.%Y %H:%M:%S") > current_datetime:
            cats = types.InlineKeyboardButton("‚ö™Ô∏è –ö–æ—Ç–∏–∫–∏ (250 —à—Ç.)", callback_data=cats_meme)
            all_available_tarifs_memes[game_code].append(3)
        else:
            cats = types.InlineKeyboardButton("üí∞–ö–æ—Ç–∏–∫–∏ (250 —à—Ç.)", callback_data=cats_meme)
        if "–ù–ï–ô–†–û" in tarifs_and_data and datetime.datetime.strptime(tarifs_and_data["–ù–ï–ô–†–û"][-1], "%d.%m.%Y %H:%M:%S") > current_datetime:
            neiro = types.InlineKeyboardButton("‚ö™ –ù–ï–ô–†–û (250 —à—Ç.)", callback_data=neiro_meme)
            all_available_tarifs_memes[game_code].append(4)
        else:
            neiro = types.InlineKeyboardButton("üí∞–ù–ï–ô–†–û (250 —à—Ç.)", callback_data=neiro_meme)
    markup.row(demo)
    markup.add(base, cccp, cats, neiro)
    message = bot.send_message(player_id, f"–ü—Ä–∏—è—Ç–µ–ª—å, —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –º–µ–º–æ–≤-–∫–∞—Ä—Ç–∏–Ω–æ–∫:", reply_markup=markup)



    # –≤—ã–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–π
    demo_sit = f"sit_tarif:{game_code}:{0}"
    base_sit = f"sit_tarif:{game_code}:{1}"
    cccp_sit = f"sit_tarif:{game_code}:{2}"
    cats_sit = f"sit_tarif:{game_code}:{3}"
    neiro_sit = f"sit_tarif:{game_code}:{4}"
    markup = types.InlineKeyboardMarkup(row_width=2)
    demo = types.InlineKeyboardButton("üü¢Ô∏è –î–µ–º–∫–∞ (–ø–æ 10 –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç–æ–≤)", callback_data=demo_sit)
    # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –≤–æ–æ–±—â–µ –Ω–µ—Ç
    if not user_subscriptions:
        base = types.InlineKeyboardButton("üí∞–ë–∞–∑–∞ (100 —à—Ç.)", callback_data=base_sit)
        cccp = types.InlineKeyboardButton("üí∞–°–°–°–† (100 —à—Ç.)", callback_data=cccp_sit)
        cats = types.InlineKeyboardButton("üí∞–ö–æ—Ç–∏–∫–∏ (100 —à—Ç.)", callback_data=cats_sit)
        neiro = types.InlineKeyboardButton("üí∞–ù–ï–ô–†–û (100 —à—Ç.)", callback_data=neiro_sit)
    # –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á—Ç–æ-—Ç–æ
    else:
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        current_datetime = datetime.datetime.now()

        tarifs_and_data = {}  # —Ç–∞—Ä–∏—Ñ—ã - –∫–ª—é—á–∏, –¥–∞—Ç—ã-values
        for raw in user_subscriptions:
            # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ
            if raw[2] not in tarifs_and_data:
                tarifs_and_data[raw[2]] = [raw[3]]
            # –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å –¥–∞—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            else:
                tarifs_and_data[raw[2]].append(raw[3])
                tarifs_and_data[raw[2]].sort()
        if "–ë–∞–∑–∞" in tarifs_and_data and datetime.datetime.strptime(tarifs_and_data["–ë–∞–∑–∞"][-1],
                                                                    "%d.%m.%Y %H:%M:%S") > current_datetime:
            base = types.InlineKeyboardButton("‚ö™Ô∏è –ë–∞–∑–∞ (100 —à—Ç.)", callback_data=base_sit)
            all_available_tarifs_sit[game_code].append(1)
        else:
            base = types.InlineKeyboardButton("üí∞–ë–∞–∑–∞ (100 —à—Ç.)", callback_data=base_sit)
        if "–°–°–°–†" in tarifs_and_data and datetime.datetime.strptime(tarifs_and_data["–°–°–°–†"][-1],
                                                                    "%d.%m.%Y %H:%M:%S") > current_datetime:
            cccp = types.InlineKeyboardButton("‚ö™Ô∏è –°–°–°–† (100 —à—Ç.)", callback_data=cccp_sit)
            all_available_tarifs_sit[game_code].append(2)
        else:
            cccp = types.InlineKeyboardButton("üí∞–°–°–°–† (100 —à—Ç.)", callback_data=cccp_sit)
        if "–ö–æ—Ç–∏–∫–∏" in tarifs_and_data and datetime.datetime.strptime(tarifs_and_data["–ö–æ—Ç–∏–∫–∏"][-1],
                                                                      "%d.%m.%Y %H:%M:%S") > current_datetime:
            cats = types.InlineKeyboardButton("‚ö™Ô∏è –ö–æ—Ç–∏–∫–∏ (100 —à—Ç.)", callback_data=cats_sit)
            all_available_tarifs_sit[game_code].append(3)
        else:
            cats = types.InlineKeyboardButton("üí∞–ö–æ—Ç–∏–∫–∏ (100 —à—Ç.)", callback_data=cats_sit)
        if "–ù–ï–ô–†–û" in tarifs_and_data and datetime.datetime.strptime(tarifs_and_data["–ù–ï–ô–†–û"][-1],
                                                                     "%d.%m.%Y %H:%M:%S") > current_datetime:
            neiro = types.InlineKeyboardButton("‚ö™ –ù–ï–ô–†–û (100 —à—Ç.)", callback_data=neiro_sit)
            all_available_tarifs_sit[game_code].append(4)
        else:
            neiro = types.InlineKeyboardButton("üí∞–ù–ï–ô–†–û (100 —à—Ç.)", callback_data=neiro_sit)
    markup.row(demo)
    markup.add(base, cccp, cats, neiro)
    message2 = bot.send_message(player_id, f"–ò –µ—â—ë –ø–æ—Ç—Ä—É–¥–∏—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã —Å–∏—Ç—É–∞—Ü–∏–π:", reply_markup=markup)
    return (message.message_id, message2.message_id)




# –Ω–æ–≤–∞—è –∏–≥—Ä–∞
@bot.callback_query_handler(func=lambda message: message.data == 'new_game')
def new_game(message):
    player_id = message.message.chat.id
    #user_id = message.from_user.id
    pl_name = message.from_user.first_name
    game_code = generate_game_code()
    ids_3_gotovo[game_code] = []

    message_id = message.message.message_id
    bot.delete_message(player_id, message_id)


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    active_games[game_code] = {'creator': player_id, 'players': [player_id], 'usernames': [pl_name]}
    flag_vse_progolos[game_code] = False
    id_and_names[game_code] = {}
    id_and_names[game_code][player_id] = pl_name

    # –≤—ã–±–æ—Ä –∫–æ–ª–æ–¥—ã –º–µ–º–æ–≤ –∏ —Å–∏—Ç—É–∞—Ü–∏–π
    message_id_1,  message_id_2 = chose_deck_of_cards(player_id, game_code)
    ids_3_gotovo[game_code].append(message_id_1)
    ids_3_gotovo[game_code].append(message_id_2)

    markup = types.InlineKeyboardMarkup(row_width=1)
    callback_data_podtverdit = f"podtverdit:{game_code}"
    mozno_li_nazat_gotovo[game_code] = True
    podtverdit_choice = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ!", callback_data=callback_data_podtverdit)
    now_obnov[game_code] = False
    robocassa_first_time[game_code] = True
    markup.add(podtverdit_choice)
    message = bot.send_message(player_id, "–ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å –∫–æ–ª–æ–¥—ã, –∂–º–∏", reply_markup=markup)
    message_id = message.message_id
    ids_3_gotovo[game_code].append(message_id)  # –¥–æ–±–∞–≤–∏–ª–∏ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–º id —Å–æ–æ–±—â–µ–Ω–∏—è "–≥–æ—Ç–æ–≤–æ"


@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('podtverdit:'))
def podtverdit_choices(callback_query):
    data = callback_query.data.split(':')
    player_id = callback_query.from_user.id
    game_code = data[1]
    if mozno_li_nazat_gotovo[game_code]:
        mozno_li_nazat_gotovo[game_code] = False
        message_id_1 = ids_3_gotovo[game_code][0]
        message_id_2 = ids_3_gotovo[game_code][1]


        # —É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_id = callback_query.message.message_id
        bot.delete_message(player_id, message_id_1)
        bot.delete_message(player_id, message_id_2)
        bot.delete_message(player_id, message_id)

        # –≥–µ–Ω–µ—Ä–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –º–µ–º—ã. –ø–æ—è–≤–ª—è–µ—Ç—Å—è deck_of_meme_cards, trash_memes
        generate_meme_links(game_code)
        generate_sit_links(game_code)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã
        message_1 = bot.send_message(player_id, f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏: {game_code}")
        message_id_1 = message_1.message_id

        creator_id = active_games[game_code]['creator']
        create_players_message(game_code, creator_id)
        message_id_2 = message_list_of_players[game_code][creator_id]


        markup = types.InlineKeyboardMarkup(row_width=2)
        callback_data_start = f"start:{game_code}:{message_id_1}"
        start_game_button = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=callback_data_start)
        callback_data_drop = f"drop:{game_code}:{message_id_1}:{message_id_2}"
        mozno_nazad_v_menu[game_code] = True
        drop_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=callback_data_drop)
        markup.add(start_game_button, drop_button)
        bot.send_message(player_id, f'–ö–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"', reply_markup=markup)

        optimization_hand_cards(game_code, player_id)


@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('drop:'))
def drop(callback_query):
    data = callback_query.data.split(':')
    player_id = callback_query.from_user.id
    game_code = data[1]
    message_id_1 = data[2]
    message_id_2 = data[3]
    if mozno_nazad_v_menu[game_code]:
        mozno_nazad_v_menu[game_code] = False
        #—É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_id = callback_query.message.message_id
        try:
            bot.delete_message(player_id, int(message_id_1))
        except:
            pass
        try:
            bot.delete_message(player_id, message_id)
        except:
            pass
        try:
            bot.delete_message(player_id, message_id_2)
        except:
            pass

        if game_code in active_games and player_id == active_games[game_code]['creator']:
            delete_stuff(game_code)
            del id_and_names[game_code]

            del all_available_tarifs_memes[game_code]
            del nazat_tarifs_memes[game_code]
            del all_available_tarifs_sit[game_code]
            del nazat_tarifs_sit[game_code]
            del deck_of_sit_cards[game_code]
            del trash_sit[game_code]
            del deck_of_meme_cards[game_code]
            del trash_memes[game_code]

        markup = types.InlineKeyboardMarkup(row_width=1)
        new_game_button = types.InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")
        join_game_button = types.InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="join_game")
        rules_button = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data="rules")
        markup.add(new_game_button, join_game_button, rules_button)
        bot.send_message(player_id, text="–ê –Ω—É-–∫–∞, –≤—ã–±–∏—Ä–∞–π", reply_markup=markup)




@bot.callback_query_handler(func=lambda message: message.data == 'join_game')
def join_game(message):
    player_id = message.message.chat.id
    message_id = message.message.message_id
    bot.delete_message(player_id, message_id)

    game_code = -1
    callback_data_leave = f"menu:{game_code}"
    markup = types.InlineKeyboardMarkup(row_width=1)
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=callback_data_leave)
    markup.add(back_button)
    bot.send_message(player_id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã", reply_markup=markup)


# —á—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–∫–æ–¥ –∏–≥—Ä—ã)
@bot.message_handler(content_types=['text'])
def handle_game_code(message):
    # –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–¥
    if len(message.text) == 6 and message.text.isdigit():
        game_code = message.text
        chat_id = message.chat.id
        if game_code in active_games:
            pl_name = message.from_user.first_name
            join_existing_game(chat_id, pl_name, game_code)
        else:
            bot.send_message(chat_id, f"–ò–≥—Ä–∞ —Å –∫–æ–¥–æ–º {game_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


def join_existing_game(player_id, pl_name, game_code):
    players = active_games[game_code]['players']
    game_started = active_games[game_code].get('game_started', False)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ game_started

    if game_started:
        bot.send_message(player_id, f"–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –ù–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
    elif player_id in players:
        bot.send_message(player_id, f"–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω—ã –∫ —ç—Ç–æ–π –∏–≥—Ä–µ.")
    else:
        bot.send_message(player_id, f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ.")
        active_games[game_code]['players'].append(player_id)
        active_games[game_code]['usernames'].append(pl_name)
        id_and_names[game_code][player_id] = pl_name
        if 'creator' not in active_games[game_code]:
            creator_name = id_and_names[game_code][remember_players[game_code]['creator']]
            create_players_message(game_code, player_id)
            bot.send_message(player_id, text=f"–ñ–¥—ë–º, –∫–æ–≥–¥–∞ –≤—Å–µ –∑–∞–π–¥—É—Ç –∏ {creator_name} –∑–∞–ø—É—Å—Ç–∏—Ç –∏–≥—Ä—É")
        else:
            creator_name = id_and_names[game_code][active_games[game_code]['creator']]
            update_players_message(game_code, player_id, creator_name)
        optimization_hand_cards(game_code, player_id)


# –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('start:'))
def start_game(callback_query):
    data = callback_query.data.split(':')
    player_id = callback_query.from_user.id
    game_code = data[1]
    message_id_1 = data[2]
    if game_code in nazat_tarifs_memes and len(nazat_tarifs_memes[game_code]) == 0:
        bot.send_message(player_id, "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è–±—ã 1 –Ω–∞–±–æ—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
    else:
    #message_id_2 = data[3]


        #–æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ
        chat_id = callback_query.message.chat.id
        game_code = None
        for code, game in active_games.items():
            if game['creator'] == callback_query.from_user.id:
                game_code = code
                break
        if game_code in remember_players:
            del remember_players[game_code]
        if game_code:
            players = active_games[game_code]['players']
            if len(players) >= 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤

                # —É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_id = callback_query.message.message_id
                bot.delete_message(player_id, int(message_id_1))
                bot.delete_message(player_id, message_id)
                active_games[game_code]['game_started'] = True

                send_message_to_players(game_code, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
                rating[game_code] = {}
                for player in players: #–¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –≤ —Ä–µ–π—Ç–∏–Ω–≥
                    rating[game_code][player] = 0
                if len(players) < 4: #–µ—Å–ª–∏ –º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞
                    rating[game_code]["bot"] = 0
                players_hand_cards(game_code)

            else:
                bot.send_message(chat_id, "–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")

        else:
            bot.send_message(chat_id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–≥—Ä—ã, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –µ—ë –Ω–∞—á–∞—Ç—å.")


####### –ø–æ–∫–∞–∑ —Å–∏—Ç—É–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

# —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
def generate_sit_links(game_code):
    global deck_of_sit_cards
    global trash_sit
    global nazat_tarifs_sit
    nabor = nazat_tarifs_sit[game_code]
    '''for i in nabor:
        send_message_to_players(game_code, str(i))'''

    links = []
    url_1 = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/s1/"
    url_2 = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/s2/"
    url_3 = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/s3/"
    url_4 = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/s4/"
    est_demka = False
    if 0 in nabor:
        est_demka = True
        for i in range(1, 11):
            link1 = f"{url_1}N{str(i).zfill(5)}.jpg"
            link2 = f"{url_2}N{str(i).zfill(5)}.jpg"
            link3 = f"{url_3}N{str(i).zfill(5)}.jpg"
            link4 = f"{url_4}N{str(i).zfill(5)}.jpg"
            links.append(link1)
            links.append(link2)
            links.append(link3)
            links.append(link4)
    if 1 in nabor:
        if est_demka:
            for i in range(11, 101):
                link1 = f"{url_1}N{str(i).zfill(5)}.jpg"
                links.append(link1)
        else:
            for i in range(1, 101):
                link1 = f"{url_1}N{str(i).zfill(5)}.jpg"
                links.append(link1)
    if 2 in nabor:
        if est_demka:
            for i in range(11, 101):
                link2 = f"{url_2}N{str(i).zfill(5)}.jpg"
                links.append(link2)
        else:
            for i in range(1, 101):
                link2 = f"{url_2}N{str(i).zfill(5)}.jpg"
                links.append(link2)
    if 3 in nabor:
        if est_demka:
            for i in range(11, 101):
                link3 = f"{url_3}N{str(i).zfill(5)}.jpg"
                links.append(link3)
        else:
            for i in range(1, 101):
                link3 = f"{url_3}N{str(i).zfill(5)}.jpg"
                links.append(link3)
    if 4 in nabor:
        if est_demka:
            for i in range(11, 101):
                link4 = f"{url_4}N{str(i).zfill(5)}.jpg"
                links.append(link4)
        else:
            for i in range(1, 101):
                link4 = f"{url_4}N{str(i).zfill(5)}.jpg"
                links.append(link4)
    deck_of_sit_cards[game_code] = links  # –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç sit –≤ –∏–≥—Ä–µ
    trash_sit[game_code] = []  # —Å–±—Ä–æ—Å

#—Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –º–µ–º—ã
def generate_meme_links(game_code): #nabor-—Å–ø–∏—Å–æ–∫ –Ω–∞–±–æ—Ä–æ–≤ [0,1,2,3,4]
    global deck_of_meme_cards
    global trash_memes
    global nazat_tarifs_memes
    nabor = nazat_tarifs_memes[game_code]

    links = []
    url_1 = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/m1/"
    url_2 = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/m2/"
    url_3 = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/m3/"
    url_4 = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/m4/"
    est_demka = False
    if 0 in nabor:
        est_demka = True
        for i in range(1, 11):
            link1 = f"{url_1}N{str(i).zfill(5)}.jpg"
            link2 = f"{url_2}N{str(i).zfill(5)}.jpg"
            link3 = f"{url_3}N{str(i).zfill(5)}.jpg"
            link4 = f"{url_4}N{str(i).zfill(5)}.jpg"
            links.append(link1)
            links.append(link2)
            links.append(link3)
            links.append(link4)
    if 1 in nabor:
        if est_demka:
            for i in range(11, 251):
                link1 = f"{url_1}N{str(i).zfill(5)}.jpg"
                links.append(link1)
        else:
            for i in range(1, 251):
                link1 = f"{url_1}N{str(i).zfill(5)}.jpg"
                links.append(link1)
    if 2 in nabor:
        if est_demka:
            for i in range(11, 251):
                link2 = f"{url_2}N{str(i).zfill(5)}.jpg"
                links.append(link2)
        else:
            for i in range(1, 251):
                link2 = f"{url_2}N{str(i).zfill(5)}.jpg"
                links.append(link2)
    if 3 in nabor:
        if est_demka:
            for i in range(11, 251):
                link3 = f"{url_3}N{str(i).zfill(5)}.jpg"
                links.append(link3)
        else:
            for i in range(1, 251):
                link3 = f"{url_3}N{str(i).zfill(5)}.jpg"
                links.append(link3)
    if 4 in nabor:
        if est_demka:
            for i in range(11, 251):
                link4 = f"{url_4}N{str(i).zfill(5)}.jpg"
                links.append(link4)
        else:
            for i in range(1, 251):
                link4 = f"{url_4}N{str(i).zfill(5)}.jpg"
                links.append(link4)
    deck_of_meme_cards[game_code] = links  # –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç –º–µ–º–æ–≤ –≤ –∏–≥—Ä–µ
    trash_memes[game_code] = [] #—Å–±—Ä–æ—Å

#–≤—ã–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏
def random_choice_of_photo(game_code):
    global deck_of_sit_cards
    global trash_sit

    if len(deck_of_sit_cards[game_code]) == 0:
        send_message_to_players(game_code, "–°–∏—Ç—É–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–∑ –∫–æ–ª–æ–¥—ã —Å–±—Ä–æ—Å–∞. (–ú–æ–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –Ω–∞–±–æ—Ä—ã –∫–∞—Ä—Ç, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –±—ã–ª–æ –µ—â—ë –≤–µ—Å–µ–ª–µ–π!")
        deck_of_sit_cards[game_code] = trash_sit
        trash_sit[game_code] = []

    random_photo_link = random.choice(deck_of_sit_cards[game_code])
    deck_of_sit_cards[game_code].remove(random_photo_link)
    trash_sit[game_code].append(random_photo_link)
    return random_photo_link

# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –∏–≥—Ä—É
def send_photo_to_players(game_code, photo_url):
    players = active_games[game_code]['players']
    for player_id in players:
        bot.send_photo(player_id, photo_url)


def download_situation(link):
    image = Image.open(requests.get(link, stream=True).raw)

    sit_photo_io = io.BytesIO()  # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–∫–∏ –±–æ–ª—å—à–∏–µ
    image.save(sit_photo_io, format='JPEG')
    sit_photo_io.seek(0)

    return sit_photo_io


#–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–π
def send_situation(game_code):
    link = random_choice_of_photo(game_code)

    with concurrent.futures.ThreadPoolExecutor() as executor:
        cards_on_table[game_code] = {}
        cards_on_table[game_code]['photos_on_table'] = []

        future = executor.submit(download_situation, link)
        situation_card = future.result()  # Get the result from the future object
        cards_on_table[game_code]['photos_on_table'].append(situation_card.getvalue())
        #chosen_photo = BytesIO(cards_on_table[game_code]['photos_on_table'][0]) - incorrect

    # –∑–∞–ø–æ–Ω–∏–º–∞–µ–Ω–∏ id situation —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–º

    #send_photo_to_players
    players = active_games[game_code]['players']
    for player_id in players:
        sit = bot.send_photo(player_id, cards_on_table[game_code]['photos_on_table'][0])



### —Ä–∞–∑—ã–≥—Ä–æ–≤–∫–∞ —Ä—É–∫–∏


#–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫

def random_choice_of_link_meme(game_code):
    global deck_of_meme_cards
    global trash_memes
    #—Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–º—ã
    game_meme_choice = deck_of_meme_cards[game_code]
    if len(game_meme_choice) == 0:
        send_message_to_players(game_code, "–ú–µ–º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ—ç—Ç–æ–º—É –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∏–≥—Ä–∞—Ç—å —Å –º–µ–º–∞–º–∏ –∏–∑ –∫–æ–ª–æ–¥—ã —Å–±—Ä–æ—Å–∞. (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏-–º–µ–º—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å, —á—Ç–æ–±—ã –∏–≥—Ä–∞ –±—ã–ª–∞ –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π!)")
        deck_of_meme_cards[game_code] = trash_memes[game_code]
        trash_memes[game_code] = []
    else:
        random_meme_link = random.choice(game_meme_choice)
        deck_of_meme_cards[game_code].remove(random_meme_link)
        trash_memes[game_code].append(random_meme_link)
        return random_meme_link

# —Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ
'''def create_link_big_meme(number):
    base_url = f"https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/m4/"
    link = f"{base_url}N{str(number).zfill(5)}.jpg"
    return link'''
# chosen_photos[game_code]
'''def random_choice_of_number(game_code):
    game_meme_choice = chosen_memes[game_code]

    if len(game_meme_choice) == 0:
        send_message_to_players(game_code, "–ú–µ–º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
        return None
    else:
        random_photo_number = random.choice(game_meme_choice)
        chosen_memes[game_code].remove(random_photo_number)
        #del chosen_memes[game_code][random_photo_number]
        return random_photo_number'''

#–ø–ª–∞—à–∫–∞ 1/4
plashka_url_4 = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/cursor275.jpg"
plashka_response_4 = requests.get(plashka_url_4)
#if plashka_response_4.status_code == 200:
plashka_4 = Image.open(BytesIO(plashka_response_4.content))

#–ø–ª–∞–≥—à–∫–∞ 1/5
plashka_url_5 = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/cursor128.jpg"
plashka_response_5 = requests.get(plashka_url_5)
plashka_5 = Image.open(BytesIO(plashka_response_5.content))

#–∫–æ—Ä–æ–Ω–∞
crown_url = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/crown.png"
crown_response = requests.get(crown_url)
crown = Image.open(BytesIO(crown_response.content))

#–∑–≤–µ–∑–¥–∞
star_url = "https://thumb.cloud.mail.ru/weblink/thumb/xw1/Fu4g/MPnSu7KQs/star.png"
star_response = requests.get(star_url)
star = Image.open(BytesIO(star_response.content))


#–≤—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞—à–∫—É
#position = (100, 200)
def insert_image_to_main(image, position, ad_param):
    main_image = Image.open(image)
    if ad_param == 5: #hand
        main_image.paste(plashka_5, position)
    elif ad_param == 4: #4 –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫–∞
        main_image.paste(plashka_4, position)
    elif ad_param == "star":
        if main_image.mode != 'RGBA':
            main_image = main_image.convert('RGBA')
        main_image.paste(star, position, mask=star)
    else: #crown
        if main_image.mode != 'RGBA':
            main_image = main_image.convert('RGBA')

        main_image.paste(crown, position, mask=crown)


    new_image = BytesIO()
    main_image.save(new_image, format='PNG')
    new_image.seek(0)

    return new_image

def download_image(url):
    response = requests.get(url)
    image = Image.open(BytesIO(response.content))
    return image




# —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–ª–∞–∂ —Ä—É–∫–∏
def combine_small_pic(user_id, small_photos_links):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    small_images_bylinks = OrderedDict()  # OrderedDict –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {executor.submit(download_image, link): link for link in small_photos_links}
        for future in concurrent.futures.as_completed(futures):
            link = futures[future]
            result = future.result()
            small_images_bylinks[link] = result

    small_images = []
    for link in small_photos_links:
        small_images.append(small_images_bylinks[link])

    photos_per_row = 5
    lil_space_width = 640 // 5
    collage_height = 461 // 5 + 8
    collage_width = 640
    collage = Image.new('RGB', (collage_width, collage_height), (255, 255, 255))

    # –í—Å—Ç–∞–≤–∫–∞ –∫–∞–∂–¥–æ–π —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ —Ö–æ–ª—Å—Ç
    for i, image in enumerate(small_images):
        if image.height > image.width: #–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
            height = 461 // 5
            izmenil = 640 // height
            width = 461 // izmenil
            image.thumbnail((width, height))
            #image.thumbnail((image.height // 5, image.width // 5))
            x_offset = ((i % 5) * lil_space_width) + (lil_space_width - image.width) // 2
        else:  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
            image.thumbnail((640 // 5, 461 // 5))
            x_offset = (i % 5) * lil_space_width
        y_offset = 0
        # –í—Å—Ç–∞–≤–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ —Ö–æ–ª—Å—Ç
        collage.paste(image, (x_offset, y_offset))

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_buffer = BytesIO()
    collage.save(image_buffer, format='PNG')
    image_buffer.seek(0)

    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ BytesIO
    return image_buffer





def top_plus_bottom(main_photo, bottom):
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    #main_photo_link = create_link_big_meme(main_photo_number)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    #main_image = Image.open(BytesIO(requests.get(main_photo_link).content))
    main_image = Image.open(main_photo)
    bottom_image = Image.open(bottom)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ


    if main_image.height > main_image.width:
        new_width = round(main_image.width * (548 / main_image.height))
        main_image = main_image.resize((new_width, 548))
        whitespace_width = (bottom_image.width - main_image.width) // 2

        resized_bottom_image = bottom_image
        combined_width = bottom_image.width
        combined_height = main_image.height + bottom_image.height
        combined_image = Image.new('RGB', (combined_width, combined_height), (255, 255, 255))
        combined_image.paste(main_image, (whitespace_width, 0))

        #combined_image = Image.new('RGB', (bottom_image.width, main_image.height + bottom_image.height))
        #combined_image.paste(main_image, (0, 0))
    else:
        if main_image.width != bottom_image.width:
            resized_bottom_image = bottom_image.resize((main_image.width, bottom_image.height*main_image.width//bottom_image.width))
        else:
            resized_bottom_image = bottom_image
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ
        combined_image = Image.new('RGB', (resized_bottom_image.width, main_image.height + resized_bottom_image.height))
        combined_image.paste(main_image, (0, 0))  # –í—Å—Ç–∞–≤–∫–∞ main_image —Å–≤–µ—Ä—Ö—É
    combined_image.paste(resized_bottom_image, (0, main_image.height))  # –í—Å—Ç–∞–≤–∫–∞ resized_bottom_image —Å–Ω–∏–∑—É

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    combined_image_io = BytesIO()
    combined_image.save(combined_image_io, format='PNG')
    combined_image_io.seek(0)

    return combined_image_io


def left_plus_right(game_code, situation, meme):

    image1 = Image.open(situation)
    image2 = Image.open(meme)

    desired_height = 700

    max_width = image2.width
    max_height = image1.height

    if image2.height > image2.width: #–≤–µ—Ä—Ç–∏–∫–∞–ª—å
        table_width = image1.width + 640

    else:
        # –†–∞–∑–º–µ—Ä—ã —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        table_width = image1.width + image2.width
    table_height = max_height

    # –°–æ–∑–¥–∞–µ–º –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    table_image = Image.new('RGB', (table_width, table_height), (255, 255, 255))

    if image2.height > image2.width: #–≤–µ—Ä—Ç–∏–∫–∞–ª—å
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —Ü–µ–Ω—Ç—Ä—É
        x_offset_image1 = 0
        y_offset_image1 = 0
        x_offset_image2 = image1.width + (table_width - image1.width - image2.width) // 2

        #x_offset_image2 = x_offset_image1 + image1.width
        y_offset_image2 = (table_height - image2.height) // 2
    else:
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —Ü–µ–Ω—Ç—Ä—É
        x_offset_image1 = 0
        y_offset_image1 = 0
        x_offset_image2 = image1.width
        y_offset_image2 = (max_height - image2.height) // 2

    # –†–∞–∑–º–µ—â–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ
    table_image.paste(image1, (x_offset_image1, y_offset_image1))
    table_image.paste(image2, (x_offset_image2, y_offset_image2))

    image_io = BytesIO()
    table_image.save(image_io, format='PNG')
    image_io.seek(0)

    return image_io


def all_cards_on_the_table(game_code, memes): #–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–∫
    # for mem in memes:
    #     send_message_to_players(game_code, str(type(mem)))
    #     if (type(mem) == int):
    #         send_message_to_players(game_code, mem)

    images = [Image.open(BytesIO(mem)) for mem in memes]
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ —Ä—è–¥—É
    if len(images) <= 8:
        photos_per_row = min(len(images), 4)
    elif len(images) <= 10:
        photos_per_row = 5
    else:
        photos_per_row = 6

    lil_space_width = 640 // photos_per_row
    max_height = 461
    kolvo_rows = math.ceil(len(images) / photos_per_row)
    if kolvo_rows == 1:
        collage_height = kolvo_rows * max_height//photos_per_row + 5
    else:
        collage_height = kolvo_rows * max_height // photos_per_row + 24
    collage_width = 640

    collage = Image.new('RGB', (collage_width, collage_height), (255, 255, 255))

    # –í—Å—Ç–∞–≤–∫–∞ –∫–∞–∂–¥–æ–π —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ —Ö–æ–ª—Å—Ç
    prev_height = 0
    for i, image in enumerate(images):
        if image.height > image.width: #–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
            image.thumbnail((image.height // photos_per_row, image.width // photos_per_row))
            x_offset = ((i % photos_per_row) * lil_space_width) + (lil_space_width - image.width) // 2
        else: # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
            image.thumbnail((image.width//photos_per_row, image.height//photos_per_row))
            x_offset = (i % photos_per_row) * lil_space_width

        if i % photos_per_row == 0 and i != 0: #–ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            prev_height += max_height//photos_per_row + 12
        y_offset = prev_height
        # –í—Å—Ç–∞–≤–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ —Ö–æ–ª—Å—Ç
        collage.paste(image, (x_offset, y_offset))

    image_io = io.BytesIO()
    collage.save(image_io, format='PNG')
    image_io.seek(0)
    return image_io


voted_battle_cards = {} #–∫–∞—Ä—Ç—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
# –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
def progolosoval(player_id, game_code, photos_per_row, kolvo_empty, message_idd, kolvo_buttons):
    global all_combined_images

    if not flag_vse_progolos[game_code]:
        if game_code in voted_players and player_id in voted_players[game_code]:
            bot.send_message(player_id, "–¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª! –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏:)")
        else:
            numb_za_kot_progolos = battle_cards[game_code][player_id]
            voted_battle_cards[game_code][player_id] = numb_za_kot_progolos
            if player_id == cards_on_table[game_code]['photos_on_table'][numb_za_kot_progolos][0]:
                bot.send_message(player_id, "–¢–≤–æ–π –º–µ–º –ø—Ä–µ–∫—Ä–∞—Å–µ–Ω, –Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å—É–π –∑–∞ –¥—Ä—É–≥–æ–π ü§™")
            else:
                situation_card = cards_on_table[game_code]['photos_on_table'][0]
                numb_za_kot_progolos = battle_cards[game_code][player_id]
                x = -30
                y = -30
                whole_picture = add_mem_plashka(game_code, numb_za_kot_progolos - 1, (x, y))



                with message_list_lock:
                    znak = 0
                    if game_code not in voted_players:
                        voted_players[game_code] = [player_id]
                        znak = 1
                        #bot.send_message(player_id, "–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω –ø–µ—Ä–≤—ã–º. –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —Å–∫–∞–∂—É—Ç –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ ü§î"
                        all_combined_images[game_code] = []
                    elif player_id not in voted_players[game_code]:
                        voted_players[game_code].append(player_id)
                        #bot.send_message(player_id, "–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω. –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —Å–∫–∞–∂—É—Ç –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ ü§î")
                        znak = 1

                if znak == 1:
                    bot.send_message(player_id, "–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω. –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —Å–∫–∞–∂—É—Ç –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ ü§î")
                    with message_list_lock:
                        # –¥–æ–±–∞–≤–ª—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è
                        if game_code not in messages_ids:
                            messages_ids[game_code] = {}
                        messages_ids[game_code][player_id] = message_idd

                    # –ø–ª–∞—à–∫–∞
                    whole_picture_ = Image.open(whole_picture)
                    x = whole_picture_.width // 4 * (numb_za_kot_progolos - 1)
                    if kolvo_buttons == 4:
                        y = whole_picture_.height - 16
                    elif numb_za_kot_progolos <= 4:
                        y = 4 * whole_picture_.height // 5 - 28
                    else:
                        y = whole_picture_.height - 28
                        x = whole_picture_.width // 4 * (numb_za_kot_progolos - 4 - 1)

                    new_image = insert_image_to_main(whole_picture, (x, y), 4)

                    # if len(active_games[game_code]['players']) != len(voted_players[game_code]):
                    bot.edit_message_media(
                        chat_id=player_id,
                        message_id=message_idd,
                        media=types.InputMediaPhoto(new_image)
                    )

    with message_list_lock:
        if game_code in voted_players:
            flag_vse_progolos[game_code] = len(active_games[game_code]['players']) == len(voted_players[game_code])
        else:
            flag_vse_progolos[game_code] = False
    if flag_vse_progolos[game_code]:
        del voted_players[game_code]

        send_message_to_players(game_code, "–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –ê –≤–æ—Ç –∏ —Ä–µ–π—Ç–∏–Ω–≥ –º–µ–º–æ–ª—é–±–æ–≤:")

        progolosoval_prt_2(game_code, kolvo_buttons, photos_per_row, kolvo_empty)



def progolosoval_prt_2(game_code, kolvo_buttons, photos_per_row, kolvo_empty):
    # –≤—Å–µ–º –∫–∞p—Ç–∏–Ω–∞–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º 0 –≥–æ–ª–æ—Å–æ–≤
    stop_waiting_golosov[game_code] = True
    for card in cards_on_table[game_code]['photos_on_table'][1:-1]:
        card.append(0)

    for numb_za in voted_battle_cards[game_code].values():  # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–∏–Ω, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        cards_on_table[game_code]['photos_on_table'][numb_za][2] += 1  # –µ—Å–ª–∏ –Ω–µ –≥–æ–ª–æ—Å

    # –∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏
    buttons = []
    zero = "zero"
    callback_zero = f"choose:{game_code}:{zero}:{photos_per_row}:{kolvo_empty}"

    answer = {}
    max_votes = 0
    num_winner = 0
    i = 0
    for result in cards_on_table[game_code]['photos_on_table'][1:-1]:
        i += 1
        pl_id = result[0]
        votes = result[2]
        if votes > max_votes:
            num_winner = i
            max_votes = votes
        if pl_id in id_and_names[game_code]:
            rating[game_code][pl_id] += votes
            answer[pl_id] = votes
            pl_name = id_and_names[game_code][pl_id]
            # button_text = f"{pl_name} (+{votes})"
            button_text = f"{pl_name}"
        else:
            rating[game_code]["bot"] += votes
            # button_text = f"bot (+{votes})"
            button_text = f"bot"
            if "bot" not in answer:
                answer["bot"] = votes
            else:
                answer["bot"] += votes
        button = types.InlineKeyboardButton(button_text, callback_data=callback_zero)
        buttons.append(button)

    # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
    x = -30
    y = -30
    whole_picture = add_mem_plashka(game_code, num_winner - 1, (x, y))
    whole_picture_ = Image.open(whole_picture)

    markup = types.InlineKeyboardMarkup(row_width=photos_per_row)
    markup.add(*buttons)

    # —Å–æ–ª–Ω—Ü–µ –Ω–∞ top
    top = whole_picture_
    x = top.width - 150
    y = 40
    new_top = insert_image_to_main(whole_picture, (x, y), "sun")

    # –∑–≤–µ–∑–¥—ã
    x = 232
    x_initial = x
    y = 665
    com_star = new_top

    if kolvo_buttons == 4:
        y = 658
        for num in range(kolvo_buttons):
            kolvo_votes = cards_on_table[game_code]['photos_on_table'][num + 1][2]
            for vote in range(kolvo_votes):
                # for vote in range(3):
                com_star = insert_image_to_main(com_star, (x, y), "star")
                x -= 20
            x = x_initial + 275
            x_initial = x
    else:
        for num in range(kolvo_buttons):
            kolvo_votes = cards_on_table[game_code]['photos_on_table'][num + 1][2]
            if num <= 3:
                y = 658
            elif num == 4:
                x = 232
                x_initial = x
                y = 875
            else:
                y = 875
                # num = num - 4
            for vote in range(kolvo_votes):
                # for vote in range(3):
                com_star = insert_image_to_main(com_star, (x, y), "star")
                x -= 20
            x = x_initial + 275
            x_initial = x

    com = Image.open(com_star)
    new_width = 640
    new_height = int(new_width / whole_picture_.width * whole_picture_.height)
    resized_com_star = com.resize((new_width, new_height))

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö
    players = active_games[game_code]['players']
    for pl_id in players:
        combined_image_io = copy.deepcopy(resized_com_star)
        # with message_list_lock:
        messag_id = golosov_mes_ids[game_code][pl_id]
        #messag_id = int(messages_ids[game_code][pl_id])
        if messag_id is not None:
            # bot.send_photo(pl_id, combined_image_io)
            bot.edit_message_media(
                chat_id=pl_id,
                message_id=messag_id,
                media=types.InputMediaPhoto(combined_image_io),
                reply_markup=markup
            )

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏ –≤—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    rating[game_code] = dict(sorted(rating[game_code].items(), key=lambda x: x[1], reverse=True))
    cur_rating = ""

    i = 1
    for pl_id in rating[game_code]:
        if pl_id in id_and_names[game_code]:
            pl_name = id_and_names[game_code][pl_id]
            if pl_id in answer:
                votes = answer[pl_id]
            else:
                votes = 0
        else:
            pl_name = "bot"
            votes = answer["bot"]
        if votes == 1:
            cur_rating += f"{i}. <b>{pl_name}</b> +{votes} –≥–æ–ª–æ—Å, <b>–∏—Ç–æ–≥–æ {rating[game_code][pl_id]}</b>\n"
        elif votes == 2 or votes == 3 or votes == 4:
            cur_rating += f"{i}. <b>{pl_name}</b> +{votes} –≥–æ–ª–æ—Å–∞, <b>–∏—Ç–æ–≥–æ {rating[game_code][pl_id]}</b>\n"
        else:
            cur_rating += f"{i}. <b>{pl_name}</b> +{votes} –≥–æ–ª–æ—Å–æ–≤, <b>–∏—Ç–æ–≥–æ {rating[game_code][pl_id]}</b>\n"

        i += 1
    for pl in players:
        bot.send_message(pl, cur_rating, parse_mode="HTML")

    # –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    players_hand_cards(game_code)

golosov_mes_ids = {} #—Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ id —Å—Ç–æ–ª–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–æ—Ç–æ–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

# callback –¥–ª—è table
@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('choose:'))
def choose_callback_handler(callback_query):

    data = callback_query.data.split(':')
    player_id = callback_query.message.chat.id
    game_code = data[1]
    additional_parameter = data[2]
    photos_per_row = int(data[3])
    kolvo_empty = int(data[4])
    message_idd = callback_query.message.message_id


    if additional_parameter.isdigit():  # —á–∏—Å–ª–æ
        button_number = int(additional_parameter) + 1  # —Ç–∫ 0 –∫–∞—Ä—Ç–∞-—Å–∏—Ç—É–∞—Ü–∏—è
        #–≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Ç—É –∂–µ –∫–Ω–æ–ø–∫—É
        mozno_li_nazat = True
        if battle_cards[game_code][player_id] == button_number:
            mozno_li_nazat = False
        else:
            battle_cards[game_code][player_id] = button_number # —á–µ–ª –≤—ã–±—Ä–∞–ª —ç—Ç—É –∫–∞—Ä—Ç—É
        if mozno_li_nazat:
            # –ø–æ–∑–∏—Ü–∏—è - –±–æ–ª—å—à–æ–π  –º–µ–º memes[button_number]
            num_buttons = len(cards_on_table[game_code]['photos_on_table']) - 2

            # callback
            callback_data_list = [f"choose:{game_code}:{i}:{photos_per_row}:{kolvo_empty}" for i in range(num_buttons)]
            vote = "vote"
            zero = "zero"
            callback_vote_for_this = f"choose:{game_code}:{vote}:{photos_per_row}:{kolvo_empty}"
            callback_zero = f"choose:{game_code}:{zero}:{photos_per_row}:{kolvo_empty}"

            buttons = []
            numb_za_kot_progolos = battle_cards[game_code][player_id]
            for i, callback_data in enumerate(callback_data_list):
                cur = cards_on_table[game_code]['photos_on_table'][i+1][0]

                if cur == player_id:
                    if i+1 == numb_za_kot_progolos:
                        button_text = "—Ç–≤–æ–πüëÜ"
                    else:
                        button_text = "—Ç–≤–æ–π"
                elif i+1 == numb_za_kot_progolos:
                    button_text = f"{i+1}üëÜ"
                else:
                    button_text = str(i+1)

                #button_text = "—Ç–≤–æ–π –º–µ–º" if cur == player_id else str(i+1)

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
                button = types.InlineKeyboardButton(button_text, callback_data=callback_data)
                buttons.append(button)

            # –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã—à–∫–∏
            for empty in range(kolvo_empty):
                buttons.append(types.InlineKeyboardButton(" ", callback_data=callback_zero))

            markup = types.InlineKeyboardMarkup(row_width=photos_per_row)
            send_meme_button = types.InlineKeyboardButton("–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ–º",
                                                          callback_data=callback_vote_for_this)

            markup.add(*buttons)
            markup.add(send_meme_button)

            # –ø–ª–∞—à–∫–∞

            blank_com = Image.open(io.BytesIO(blank_table[game_code]))
            x = blank_com.width // 4 * (button_number - 1)
            if len(buttons) == 4:
                y = blank_com.height - 16
            elif button_number <= 4:
                y = 4 * blank_com.height // 5 - 28
            else:
                y = blank_com.height - 28
                x = blank_com.width // 4 * (button_number - 4 - 1)

            whole_picture = add_mem_plashka(game_code, numb_za_kot_progolos-1, (x, y))
            whole_picture_ = Image.open(whole_picture)
            new_width = 640
            new_height = int(new_width / whole_picture_.width * whole_picture_.height)
            resized_whole_picture = whole_picture_.resize((new_width, new_height))

            bot.edit_message_media(
                chat_id=player_id,
                message_id=callback_query.message.message_id,
                media=types.InputMediaPhoto(resized_whole_picture),
                reply_markup=markup
            )

    # elif additional_parameter == 'zero': # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫
        # send_message_to_players(game_code, "zer")

    elif additional_parameter == 'vote':
        num_buttons = len(cards_on_table[game_code]['photos_on_table']) - 2
        progolosoval(player_id, game_code, photos_per_row, kolvo_empty, message_idd, num_buttons)


def situation_plus_bar_blank(game_code):
    #cards_on_table[game_code]['photos_on_table']

    situation = Image.open(io.BytesIO(cards_on_table[game_code]['photos_on_table'][0]))
    new_width = 479
    new_height = 665
    resized_sit = situation.resize((new_width, new_height))
    bar = Image.open(io.BytesIO(cards_on_table[game_code]['photos_on_table'][-1]))

    # resize bottom
    resized_bar = bar.resize((1101, bar.height * 1101 // bar.width))

    table_height = 665 + resized_bar.height
    table_width = 1101

    # –°–æ–∑–¥–∞–µ–º –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    table_image = Image.new('RGB', (table_width, table_height), (255, 255, 255))

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —Ü–µ–Ω—Ç—Ä—É
    x_offset_image1 = -3
    y_offset_image1 = 0
    x_offset_image2 = 0
    y_offset_image2 = 665

    # –†–∞–∑–º–µ—â–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ
    table_image.paste(resized_sit, (x_offset_image1, y_offset_image1))
    table_image.paste(resized_bar, (x_offset_image2, y_offset_image2))


    image_io = BytesIO()
    table_image.save(image_io, format='PNG')
    image_io.seek(0)

    return image_io

def add_mem_plashka(game_code, number, position): #–æ—Ç 0
    blank = Image.open(io.BytesIO(blank_table[game_code]))
    mem = Image.open(io.BytesIO(cards_on_table[game_code]['photos_on_table'][number + 1][1]))


    blank.paste(plashka_4, position)

    table_width = 1101
    table_height = blank.height

    if mem.height > mem.width:  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å
        new_width = 479
        new_height = 665
        resized_mem = mem.resize((new_width, new_height))
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —Ü–µ–Ω—Ç—Ä—É
        x_offset_image2 = 476 + (table_width - 479 - resized_mem.width) // 2
        y_offset_image2 = 0
    else:
        new_width = 680
        new_height = 490
        resized_mem = mem.resize((new_width, new_height))
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —Ü–µ–Ω—Ç—Ä—É
        x_offset_image2 = 430
        y_offset_image2 = (640 - resized_mem.height) // 2

    # –†–∞–∑–º–µ—â–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ
    blank.paste(resized_mem, (x_offset_image2, y_offset_image2))


    image_io = BytesIO()
    blank.save(image_io, format='PNG')
    image_io.seek(0)


    return image_io


stop_waiting_meme_chose = {}
stop_waiting_golosov = {}

#—Ä–∞–∑—ã–≥—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç
def table(player_id, game_code):
    battle_cards[game_code] = {}
    voted_battle_cards[game_code] = {}
    stop_waiting_meme_chose[game_code] = True
    stop_waiting_golosov[game_code] = False

    players = active_games[game_code]['players']
    active_players = players_order[game_code]

    #–¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Ñ–æ—Ç–∫–∏
    if len(active_players) < 4:
        if players_hand[game_code]['round'] == 1:
            send_message_to_players(game_code,
                                    "–£ –≤–∞—Å –º–µ–Ω—å—à–µ 4 –∏–≥—Ä–æ–∫–æ–≤, –ø–æ—ç—Ç–æ–º—É —Å –≤–∞–º–∏ –∏–≥—Ä–∞–µ—Ç –±–æ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ –æ–±—ã–≥—Ä–∞—Ç—å –∞—Ö–∞—Ö üòà")

        with concurrent.futures.ThreadPoolExecutor() as executor:
            features = {}
            big_images_bynumb = OrderedDict()
            cards_links = []
            #for i in range (8 - len(players)):
            for i in range(4 - len(active_players)):
                card_link = random_choice_of_link_meme(game_code)
                cards_links.append(card_link)

                future = executor.submit(download_big_photo, card_link)
                features[future] = card_link
            # –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –±–æ–ª—å—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            for future in concurrent.futures.as_completed(features):
                card_number = features[future]
                result = future.result()
                big_images_bynumb[card_number] = result

            for number in cards_links:
                cards_on_table[game_code]['photos_on_table'].append(['bot', big_images_bynumb[number].getvalue()])

    # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–∞—Ä—Ç—ã
    rest_of_list = cards_on_table[game_code]['photos_on_table'][1:].copy()
    random.shuffle(rest_of_list)
    cards_on_table[game_code]['photos_on_table'][1:] = rest_of_list

    situation_card = cards_on_table[game_code]['photos_on_table'][0]
    #–ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ –º–µ–º—ã. –Ω–∞ 0 –º–µ—Å—Ç–µ –æ—Å—Ç–∞—ë—Ç—Å—è —Å–∏—Ç—É–∞—Ü–∏—è


    # –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º —Å–∫–ª–µ–π–∫—É, –¥–µ–ª–∞–µ–º blank —Å–∏—Ç—É–∞—Ü–∏—è + –±–∞—Ä
    '''# –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å—Ç–æ–ª–∞, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑—Ü–∏–∏—è
    top_pic = left_plus_right(game_code, BytesIO(situation_card),
                              BytesIO(cards_on_table[game_code]['photos_on_table'][1][1]))
'''
    memes = []
    for mem in cards_on_table[game_code]['photos_on_table'][1:]:  # –±–µ—Ä–µ–º –≤—Å–µ –∫—Ä–æ–º–µ 0, —Ç–∫ 0 - —Å–∏—Ç—É–∞—Ü–∏—è
        memes.append(mem[1])
        # —Ä–∞–±–æ—Ç–∞–µ—Ç

    low_pic = all_cards_on_the_table(game_code, memes)

    # –¥–æ–±–∞–≤–ª—è–µ–º –±–∞—Ä –∫–æ –≤—Å–µ–º –∫–∞—Ä—Ç–∞–º (—Å–∏—Ç—É–∞—Ü–∏—è, –∫–∞—Ä—Ç—ã, –±–∞—Ä)
    cards_on_table[game_code]['photos_on_table'].append(low_pic.getvalue())

    #–≥–µ–Ω–µ—Ä–∏–º —Å–∫–ª–µ–π–∫—É
    blank = situation_plus_bar_blank (game_code)

    blank_table[game_code] = blank.getvalue()


    # –¥–æ–±–∞–≤–ª—è–µ–º 0 –ø–æ–∑–∏—Ü–∏—é (–ø–ª–∞—à–∫—É –∏ –º–µ–º)
    x = 0
    com_blank = Image.open(blank)
    if len(cards_on_table[game_code]['photos_on_table']) - 2 == 4:
        y = com_blank.height - 16
    else:
        y = 4 * com_blank.height // 5 - 28
    whole_picture = add_mem_plashka(game_code, 0, (x, y))
    whole_picture_ = Image.open(whole_picture)

    new_width = 640
    new_height = int(new_width / whole_picture_.width * whole_picture_.height)
    resized_whole_picture = whole_picture_.resize((new_width, new_height))

    num_buttons = len(memes)
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ—á–µ–∫ –≤ —Ä—è–¥—É
    photos_per_row = 4

    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—à–µ–∫
    kolvo_rows = math.ceil(num_buttons / photos_per_row)
    vsego_mest = kolvo_rows * photos_per_row
    kolvo_empty = vsego_mest - num_buttons

    # callback
    callback_data_list = [f"choose:{game_code}:{i}:{photos_per_row}:{kolvo_empty}" for i in range(num_buttons)]
    vote = "vote"
    zero = "zero"
    callback_vote_for_this = f"choose:{game_code}:{vote}:{photos_per_row}:{kolvo_empty}"
    callback_zero = f"choose:{game_code}:{zero}:{photos_per_row}:{kolvo_empty}"

    golosov_mes_ids[game_code] = {}
    for cur_player in players:  # –ø–æ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–µ–º –≤ –∏–≥—Ä—É (—Ç–æ –µ—Å—Ç—å –Ω–µ –≤—Å–µ)
        buttons = []
        # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤–∫–∏–Ω—É–ª –º–µ–º
        if cur_player in active_players:
            battle_cards[game_code][cur_player] = 1
            numb_za_kot_progolos = battle_cards[game_code][cur_player]
            for i, callback_data in enumerate(callback_data_list):
                cur = cards_on_table[game_code]['photos_on_table'][i + 1][0]
                if cur == cur_player:
                    if i+1 == numb_za_kot_progolos:
                        button_text = "—Ç–≤–æ–πüëÜ"
                    else:
                        button_text = "—Ç–≤–æ–π"
                elif  i+1 == numb_za_kot_progolos:
                    button_text = f"{i+1}üëÜ"
                else:
                    button_text = str(i+1)
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
                button = types.InlineKeyboardButton(button_text, callback_data=callback_data)
                buttons.append(button)
        # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —É—Å–ø–µ–ª –≤–∫–∏–Ω—É—Ç—å –º–µ–º
        else:
            battle_cards[game_code][cur_player] = 1
            numb_za_kot_progolos = battle_cards[game_code][cur_player]
            for i, callback_data in enumerate(callback_data_list):
                cur = cards_on_table[game_code]['photos_on_table'][i + 1][0]
                if i + 1 == numb_za_kot_progolos:
                    button_text = f"{i + 1}üëÜ"
                else:
                    button_text = str(i + 1)
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
                button = types.InlineKeyboardButton(button_text, callback_data=callback_data)
                buttons.append(button)

        # –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã—à–∫–∏
        for empty in range (kolvo_empty):
                buttons.append(types.InlineKeyboardButton(" ", callback_data=callback_zero))

        markup = types.InlineKeyboardMarkup(row_width=photos_per_row)
        send_meme_button = types.InlineKeyboardButton("–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ–º", callback_data=callback_vote_for_this)
        markup.add(*buttons)
        markup.add(send_meme_button)

        picture = copy.deepcopy(resized_whole_picture)

        all_combined_images[game_code].append(picture)

        message = bot.send_photo(chat_id=cur_player, photo=picture, reply_markup=markup)
        golosov_mes_ids[game_code][cur_player] = message.message_id

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        if cur_player == players[-1]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫
            #time.sleep(10)
            wait_thread = threading.Thread(target=wait_and_check_golosov(game_code))
            wait_thread.start()
            wait_thread.join()
            if (game_code not in voted_players or len(voted_players[game_code]) == 0) and not stop_waiting_golosov[game_code]:
                bot.send_message(player_id, "–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª")
            # –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –Ω–µ –≤—Å–µ
            elif not stop_waiting_golosov[game_code] and len(active_games[game_code]['players']) != len(voted_players[game_code]):
                del voted_players[game_code]
                kolvo_buttons = len(cards_on_table[game_code]['photos_on_table']) - 2
                progolosoval_prt_2(game_code, kolvo_buttons, photos_per_row, kolvo_empty)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞
@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('combine:'))
def combine_callback_handler(callback_query):
    data = callback_query.data.split(':')
    player_id = callback_query.message.chat.id
    game_code = data[1]
    additional_parameter = data[2]

    if additional_parameter == "send_meme_button": # –∏–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º –≤ –∏–≥—Ä—É
        if game_code not in flag_pl_otpravil:
            flag_pl_otpravil[game_code] = []
        if player_id in flag_pl_otpravil[game_code]:
            bot.send_message(player_id, "–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –º–µ–º! –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏:)")
        else:
            flag_pl_otpravil[game_code].append(player_id)

            # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º id —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
            sit = bot.send_message(player_id, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç –º–µ–º –≤ –∏–≥—Ä—É. –î–æ–∂–¥—ë–º—Å—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤")

            chosen_mem_number = cards_on_table[game_code][player_id]
            chosen_photo = BytesIO(photo_bar_players[game_code][player_id][chosen_mem_number])

            if game_code not in kolvo_players_that_send_mem:
                kolvo_players_that_send_mem[game_code] = 1
                players_order[game_code] = []
            else:
                kolvo_players_that_send_mem[game_code] += 1

            bot.edit_message_media(chat_id=player_id, message_id=callback_query.message.message_id, media=types.InputMediaPhoto(chosen_photo))

            # 1 - —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ä—É–∫–∏
            #send_message_to_players(game_code, str(len(players_hand[game_code][player_id])))

            del players_hand[game_code][player_id][chosen_mem_number] #—Ö—Ä–∞–Ω–∏–ª–∏ 5 –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç, —Ç–µ–ø–µ—Ä—å 4
            del photo_bar_players[game_code][player_id][chosen_mem_number] #—Ö—Ä–∞–Ω–∏–ª–∏ bytes 5 –º–µ–º–æ–≤ –∏ –±–∞—Ä, —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º 4 —Ñ–æ—Ç–∫–∏ –º–µ–º–æ–≤
            photo_bar_players[game_code][player_id].pop()

            # 2 - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç–æ–ª –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–∑ pl_id and bytesIO
            #cards_on_table[game_code]['photos_on_table'].append(chosen_photo.getvalue())
            #cards_on_table[game_code]['photos_on_table'].append(chosen_photo.getvalue())
            cards_on_table[game_code]['photos_on_table'].append([player_id, chosen_photo.getvalue()])
            players_order[game_code].append(player_id) #–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤

            if len(active_games[game_code]['players']) == kolvo_players_that_send_mem[game_code]:
                flag_pl_otpravil[game_code] = []
                kolvo_players_that_send_mem[game_code] = 0
                send_message_to_players(game_code, "–í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–µ–º—ã. –í—Ä–µ–º—è –≤—ã–±–∏—Ä–∞—Ç—å —Å–∞–º—ã–π —Å–º–µ—à–Ω–æ–π!")


                # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–æ–≤


                table(player_id, game_code)



    else: #–∏–≥—Ä–æ–∫ –ø–æ–∫–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–º
        bar = BytesIO(photo_bar_players[game_code][player_id][5]) #bar

        big_photo = BytesIO()
        button_1 = "1"
        button_2 = "2"
        button_3 = "3"
        button_4 = "4"
        button_5 = "5"

        # –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Ñ–æ—Ç–æ
        mozno_li_obnovlat = True

        if additional_parameter == "first_meme":
            big_photo = BytesIO(photo_bar_players[game_code][player_id][0])
            if cards_on_table[game_code][player_id] == 0:
                mozno_li_obnovlat = False
            else:
                cards_on_table[game_code][player_id] = 0
            button_1 = "1üëÜ"
        elif additional_parameter == "second_meme":
            big_photo = BytesIO(photo_bar_players[game_code][player_id][1])
            if cards_on_table[game_code][player_id] == 1:
                mozno_li_obnovlat = False
            else:
                cards_on_table[game_code][player_id] = 1
            button_2 = "2üëÜ"
        elif additional_parameter == "third_meme":
            big_photo = BytesIO(photo_bar_players[game_code][player_id][2])
            if cards_on_table[game_code][player_id] == 2:
                mozno_li_obnovlat = False
            else:
                cards_on_table[game_code][player_id] = 2
            button_3 = "3üëÜ"
        elif additional_parameter == "fourth_meme":
            big_photo = BytesIO(photo_bar_players[game_code][player_id][3])
            if cards_on_table[game_code][player_id] == 3:
                mozno_li_obnovlat = False
            else:
                cards_on_table[game_code][player_id] = 3
            button_4 = "4üëÜ"
        elif additional_parameter == "fifth_meme":
            big_photo = BytesIO(photo_bar_players[game_code][player_id][4])
            if cards_on_table[game_code][player_id] == 4:
                mozno_li_obnovlat = False
            else:
                cards_on_table[game_code][player_id] = 4
            button_5 = "5üëÜ"

        if mozno_li_obnovlat == True:
            combined_image_io = top_plus_bottom(big_photo, bar)

            #–ø–ª–∞—à–∫–∞
            main_image = Image.open(big_photo)
            x = cards_on_table[game_code][player_id] * 128
            if (main_image.width < main_image.height): #–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
                y = 640 - 2
            else:
                y = main_image.height + 461 // 5 - 2

            new_image = insert_image_to_main(combined_image_io, (x, y), 5)

            additional_parameter_1 = "first_meme"
            additional_parameter_2 = "second_meme"
            additional_parameter_3 = "third_meme"
            additional_parameter_4 = "fourth_meme"
            additional_parameter_5 = "fifth_meme"
            additional_parameter_6 = "send_meme_button"
            callback_data_1 = f"combine:{game_code}:{additional_parameter_1}"
            callback_data_2 = f"combine:{game_code}:{additional_parameter_2}"
            callback_data_3 = f"combine:{game_code}:{additional_parameter_3}"
            callback_data_4 = f"combine:{game_code}:{additional_parameter_4}"
            callback_data_5 = f"combine:{game_code}:{additional_parameter_5}"
            callback_send_meme = f"combine:{game_code}:{additional_parameter_6}"

            # –∫–Ω–æ–ø–æ—á–∫–∏
            markup = types.InlineKeyboardMarkup(row_width=5)
            first_meme = types.InlineKeyboardButton(button_1, callback_data=callback_data_1)
            ''', number=hand_cards[1],  BytesIO=bottom_image_path'''
            second_meme = types.InlineKeyboardButton(button_2, callback_data=callback_data_2)
            third_meme = types.InlineKeyboardButton(button_3, callback_data=callback_data_3)
            fourth_meme = types.InlineKeyboardButton(button_4, callback_data=callback_data_4)
            fifth_meme = types.InlineKeyboardButton(button_5, callback_data=callback_data_5)
            send_meme_button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ–º", callback_data=callback_send_meme)
            markup.add(first_meme, second_meme, third_meme, fourth_meme, fifth_meme)
            markup.add(send_meme_button)

            bot.edit_message_media(
                chat_id=player_id,
                message_id=callback_query.message.message_id,
                media=types.InputMediaPhoto(new_image),
                reply_markup=markup
            )




#–∫–∞—Ä—Ç—ã –Ω–∞ —Ä—É–∫–∞—Ö
# players_hand[game_code][player_id]



def download_big_photo(big_photo_link):
    try:
        image = Image.open(requests.get(big_photo_link, stream=True).raw)
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        print(f"–ù–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ")

    big_photo_io = io.BytesIO()  # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–∫–∏ –±–æ–ª—å—à–∏–µ
    image.save(big_photo_io, format='PNG')
    big_photo_io.seek(0)

    return big_photo_io

def optimization_hand_cards(game_code, player_id):
    if game_code not in all_combined_images:
        all_combined_images[game_code] = []
    if game_code not in players_hand:
        players_hand[game_code] = {}

    '''#–≥–µ–Ω–µ—Ä–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –º–µ–º—ã. –ø–æ—è–≤–ª—è–µ—Ç—Å—è deck_of_meme_cards, trash_memes
    generate_meme_links(game_code)'''

    #all_meme_links = [i for i in range(1, 251)]  # all numbers of memes
    '''if game_code not in chosen_memes:
        chosen_memes[game_code] = all_meme_links'''

    players_hand[game_code][player_id] = []
    if game_code not in photo_bar_players:
        photo_bar_players[game_code] = {}
    photo_bar_players[game_code][player_id] = []

    features = {}
    big_images_bynumb = OrderedDict()
    with concurrent.futures.ThreadPoolExecutor() as executor:
        for number in range(5):
            card_link = random_choice_of_link_meme(game_code)
            #card_number = 4
            players_hand[game_code][player_id].append(card_link)  # –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä

            try:
                future = executor.submit(download_big_photo, card_link)
                features[future] = card_link
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                send_message_to_players(game_code, "–æ—à–∏–±–∫–∞")

        # –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –±–æ–ª—å—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        for future in concurrent.futures.as_completed(features):
            try:
                card_number = features[future]
                result = future.result()
                big_images_bynumb[card_number] = result
            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ future
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                send_message_to_players(game_code, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

        if game_code in players_hand:
            for number in players_hand[game_code][player_id]:
                if game_code in photo_bar_players:
                    photo_bar_players[game_code][player_id].append(big_images_bynumb[number].getvalue())


    # –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ (–≤–∏–¥–Ω–∞ 0 –∫–∞—Ä—Ç–∞)
    if game_code in photo_bar_players:
        hand_cards = players_hand[game_code][player_id]
        small_photos_numbers = hand_cards[0:]

        bottom_images = combine_small_pic(player_id, small_photos_numbers)  # bar
    # send_photo_to_players(game_code, bottom_images)
    if game_code in photo_bar_players:
        photo_bar_players[game_code][player_id].append(bottom_images.getvalue())  # –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞—Ä —Å–∞–º –±–∞
        initial_main_photo = BytesIO(photo_bar_players[game_code][player_id][0])  # —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ñ–æ—Ç–æ –≤ BytesIO

        combined_image_io = top_plus_bottom(initial_main_photo, bottom_images)

        main_image = Image.open(initial_main_photo)
        x = 0
        if (main_image.width < main_image.height):  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
            y = 640 - 2
        else:
            y = main_image.height + 461 // 5 - 2
        new_image = insert_image_to_main(combined_image_io, (x, y), 5)

    if game_code in all_combined_images:
        all_combined_images[game_code].append(new_image)



def optimization_update_hands (player_id, game_code):
    # global all_combined_images
    # —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ø–æ–ª–Ω—è—é—Ç—Å—è —Ä—É–∫–∏ –¥–æ 5 –∫–∞—Ä—Ç

    # –¥–ª—è —Ç–µ—Å—Ç–∞
    features = {}
    big_images_bynumb = OrderedDict()
    with concurrent.futures.ThreadPoolExecutor() as executor:
        card_link = random_choice_of_link_meme(game_code)
        # send_message_to_players(game_code, str(len(chosen_memes[game_code])))
        players_hand[game_code][player_id].append(card_link)  # –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä

        future = executor.submit(download_big_photo, card_link)
        features[future] = card_link

        # –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –±–æ–ª—å—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        for future in concurrent.futures.as_completed(features):
            card_number = features[future]
            result = future.result()
            big_images_bynumb[card_number] = result
        photo_bar_players[game_code][player_id].append(
            big_images_bynumb[players_hand[game_code][player_id][-1]].getvalue())

    # –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ (–≤–∏–¥–Ω–∞ 0 –∫–∞—Ä—Ç–∞)
    hand_cards = players_hand[game_code][player_id]
    small_photos_numbers = hand_cards[0:]

    bottom_images = combine_small_pic(player_id, small_photos_numbers)  # bar
    # send_photo_to_players(game_code, bottom_images)

    photo_bar_players[game_code][player_id].append(bottom_images.getvalue())  # –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞—Ä —Å–∞–º –±–∞
    initial_main_photo = BytesIO(photo_bar_players[game_code][player_id][0])  # —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ñ–æ—Ç–æ –≤ BytesIO

    combined_image_io = top_plus_bottom(initial_main_photo, bottom_images)

    main_image = Image.open(initial_main_photo)
    x = 0
    y = main_image.height + 461 // 5 - 2
    new_image = insert_image_to_main(combined_image_io, (x, y), 5)

    all_combined_images[game_code].append(new_image)

def delete_stuff(game_code):
    del active_games[game_code]
    del flag_vse_progolos[game_code]
    if game_code in rating:
        del rating[game_code]
    '''if game_code in chosen_photos:
        del chosen_photos[game_code]'''
    if game_code in cards_on_table:
        del cards_on_table[game_code]
    # del voted_players[game_code]
    if game_code in battle_cards:
        del battle_cards[game_code]
    del all_combined_images[game_code]
    if game_code in messages_ids:
        del messages_ids[game_code]
    if game_code in blank_table:
        del blank_table[game_code]
    del players_hand[game_code]
    if game_code in flag_pl_otpravil:
        del flag_pl_otpravil[game_code]
    if game_code in kolvo_players_that_send_mem:
        del kolvo_players_that_send_mem[game_code]
    if game_code in players_order:
        del players_order[game_code]
    if game_code in mozno_li_nazat_gotovo:
        del mozno_li_nazat_gotovo[game_code]
    if game_code in now_obnov:
        del now_obnov[game_code]
    if game_code in robocassa_first_time:
        del robocassa_first_time[game_code]
    if game_code in ids_3_gotovo:
        del ids_3_gotovo[game_code]
    if game_code in mozno_nazad_v_menu:
        del mozno_nazad_v_menu[game_code]
    '''if game_code in chosen_memes:
        del chosen_memes[game_code]'''

    del photo_bar_players[game_code]
    del message_list_of_players[game_code]


#–∑–∞–ø–æ–Ω–∏–º–Ω–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ä–∞—É–Ω–¥–∞
#remember_players = {}

#—Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑
@bot.callback_query_handler(func=lambda callback_query: callback_query.data.startswith('repeat:'))
def repeat(callback_query):
    data = callback_query.data.split(':')
    player_id = callback_query.from_user.id
    pl_name = callback_query.from_user.first_name
    game_code = data[1]
    # —É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_id = callback_query.message.message_id
    bot.delete_message(player_id, message_id)
    #–ø–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞–∂–∞–ª–∏
    if game_code not in remember_players:
        remember_players[game_code] = copy.copy(active_games[game_code])
        id_and_names[game_code][remember_players[game_code]['creator']] = id_and_names[game_code][active_games[game_code]['creator']]

        #—Å—Ç–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        delete_stuff(game_code)

        active_games[game_code] = {}
        active_games[game_code]['players'] = []
        active_games[game_code]['usernames'] = []

    if game_code not in id_and_names:
        id_and_names[game_code] = {}

    if player_id not in active_games[game_code]['players']:
        if player_id == remember_players[game_code]['creator']:
            active_games[game_code]['players'].append(player_id)
            active_games[game_code]['usernames'].append(pl_name)
            active_games[game_code]['creator'] = player_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
            flag_vse_progolos[game_code] = False
            id_and_names[game_code][player_id] = pl_name

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã
            message_1 = bot.send_message(player_id, f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É —Å –∫–æ–¥–æ–º: {game_code}")
            message_id_1 = message_1.message_id

            if len(active_games[game_code]['players']) > 1:
                update_players_message(game_code, player_id, pl_name)
            else:
                create_players_message(game_code, player_id)

            markup = types.InlineKeyboardMarkup(row_width=2)
            callback_data_start = f"start:{game_code}:{message_id_1}"

            start_game_button = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=callback_data_start)
            callback_data_drop = f"drop:{game_code}:{message_id_1}:{0}"
            mozno_nazad_v_menu[game_code] = True
            # –Ω–∞–∑–∞–¥
            drop_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=callback_data_drop)
            markup.add(start_game_button, drop_button)
            bot.send_message(player_id, f'–ö–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"', reply_markup=markup)

            optimization_hand_cards(game_code, player_id)
        else:
            #–¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –∫—Ä–∏—ç–π—Ç–æ—Ä –µ—Å—Ç—å
            if 'creator' in active_games[game_code]:
                join_existing_game(player_id, str(pl_name), game_code)
            else:

                join_existing_game(player_id, str(pl_name), game_code)

timer_hands = {}
hands_mes_id = {} #–ª–µ–∂–∞—Ç
import time
from telegram import Update
from telegram.ext import Updater, CallbackContext, CallbackQueryHandler


def wait_and_check_meme_chose(game_code):
    global stop_waiting_meme_chose
    print("Waiting for 10 seconds...")
    for _ in range(10):
        if stop_waiting_meme_chose[game_code]:
            print("Waiting was interrupted.")
            return
        time.sleep(1)
    print("Waiting finished.")

def wait_and_check_golosov(game_code):
    global stop_waiting_golosov
    print("Waiting for 10 seconds...")
    for _ in range(10):
        if stop_waiting_golosov[game_code]:
            print("Waiting was interrupted.")
            return
        time.sleep(1)
    print("Waiting finished.")
def players_hand_cards(game_code):
    global all_combined_images
    global hands_mes_id
    global stop_waiting_meme_chose
    stop_waiting_meme_chose[game_code] = False
    if game_code not in players_hand:
        players_hand[game_code] = {}

    players = active_games[game_code]['players']

    # –µ—Å–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–Ω –º–∞–∫—Å–∏–º—É–º –æ—á–∫–æ–≤
    first_key, first_value = next(iter(rating[game_code].items()))

    # first_value - –º–∞–∫—Å–∏–º—É–º –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    # –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
    if first_value >= 1:
        if first_key in id_and_names[game_code]:
            pl_name = id_and_names[game_code][first_key]
        else:
            pl_name = "bot"
        for player_id in players:
            bot.send_message(player_id, f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –ü–æ–±–µ–¥–∏—Ç–µ–ª—å <b>{pl_name}</b>!üéâ", parse_mode="HTML")
        # –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë
        markup = types.InlineKeyboardMarkup(row_width=2)
        callback_data_repeat = f"repeat:{game_code}"
        callback_data_leave = f"menu:{game_code}"
        repeat_the_game = types.InlineKeyboardButton("–°—ã–≥—Ä–∞—Ç—å –µ—â—ë", callback_data=callback_data_repeat)
        leave_the_game = types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data=callback_data_leave)
        markup.add(repeat_the_game, leave_the_game)
        for player_id in players:
            bot.send_message(player_id, text="–ï—â—ë –ø–∞—Ä—Ç–µ–µ—á–∫—É?üòè", reply_markup=markup)

    else:
        if players_hand.get(game_code, {}).get('round'):  # –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
            # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É–∫ –∏ down time
            for player_id in players:
                optimization_update_hands(player_id, game_code)

            flag_vse_progolos[game_code] = False
            players_hand[game_code]['round'] += 1  # —Å—á—ë—Ç—á–∏–∫ —Ä–∞—É–Ω–¥–æ–≤
            for pl in players:
                bot.send_message(pl, f"<b>{players_hand[game_code]['round']} —Ä–∞—É–Ω–¥</b>", parse_mode="HTML")
            #send_message_to_players(game_code, f"{players_hand[game_code]['round']} —Ä–∞—É–Ω–¥")
            send_situation(game_code)

            #send_message_to_players(game_code, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –º–µ–º:")
            # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º id —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
            players = active_games[game_code]['players']
            for player_id in players:
                sit = bot.send_message(player_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –º–µ–º:")


            # –≤ –±–∞—Ä –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –º–µ–º –∏ –±–∞—Ä(–º–∏–Ω–∏ —Ñ–æ—Ç–∫–∏)
        else:  # 1 —Ä–∞—É–Ω–¥
            for pl in players:
                bot.send_message(pl, f"<b>1 —Ä–∞—É–Ω–¥</b>", parse_mode="HTML")
            #send_message_to_players(game_code, "1 —Ä–∞—É–Ω–¥")
            send_situation(game_code)
            #send_message_to_players(game_code, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –º–µ–º:")
            players = active_games[game_code]['players']
            for player_id in players:
                sit = bot.send_message(player_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –º–µ–º:")
            players_hand[game_code]['round'] = 1


        flag = 0
        for player_id in players:
            combined_image_io = all_combined_images[game_code][flag]
            flag += 1
            additional_parameter_1 = "first_meme"
            additional_parameter_2 = "second_meme"
            additional_parameter_3 = "third_meme"
            additional_parameter_4 = "fourth_meme"
            additional_parameter_5 = "fifth_meme"
            additional_parameter_6 = "send_meme_button"
            callback_data_1 = f"combine:{game_code}:{additional_parameter_1}"
            callback_data_2 = f"combine:{game_code}:{additional_parameter_2}"
            callback_data_3 = f"combine:{game_code}:{additional_parameter_3}"
            callback_data_4 = f"combine:{game_code}:{additional_parameter_4}"
            callback_data_5 = f"combine:{game_code}:{additional_parameter_5}"
            callback_send_meme = f"combine:{game_code}:{additional_parameter_6}"

            # cards_on_table[game_code] = {'photos_on_table': [], 'player_ids': []}
            # —É –≤—Å–µ—Ö –ø–æ–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ 0 –∫–∞—Ä—Ç–∞
            cards_on_table[game_code][player_id] = 0

            # –∫–Ω–æ–ø–æ—á–∫–∏
            markup = types.InlineKeyboardMarkup(row_width=5)
            first_meme = types.InlineKeyboardButton("1üëÜ", callback_data=callback_data_1)
            ''', number=hand_cards[1],  BytesIO=bottom_image_path'''
            second_meme = types.InlineKeyboardButton("2", callback_data=callback_data_2)
            third_meme = types.InlineKeyboardButton("3", callback_data=callback_data_3)
            fourth_meme = types.InlineKeyboardButton("4", callback_data=callback_data_4)
            fifth_meme = types.InlineKeyboardButton("5", callback_data=callback_data_5)
            send_meme_button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ–º", callback_data=callback_send_meme)
            markup.add(first_meme, second_meme, third_meme, fourth_meme, fifth_meme)
            markup.add(send_meme_button)

            message = bot.send_photo(player_id, combined_image_io, reply_markup=markup)
            if game_code not in hands_mes_id:
                hands_mes_id[game_code] = {}
            hands_mes_id[game_code][player_id] = message.message_id


            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            if player_id == players[-1]: #–ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫
                #time.sleep(10)
                wait_thread = threading.Thread(target=wait_and_check_meme_chose(game_code))
                wait_thread.start()
                wait_thread.join()
                # –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–ª –º–µ–º
                if game_code not in flag_pl_otpravil and not stop_waiting_meme_chose[game_code]:
                    bot.delete_message(player_id, message.message_id)
                    bot.send_message(player_id, "–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–ª –º–µ–º, –ø–æ—ç—Ç–æ–º—É –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
                    # –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –¥—Ä–æ–ø–Ω—É—Ç—å –∏–≥—Ä—É
                    if game_code in active_games and player_id == active_games[game_code]['creator']:
                        delete_stuff(game_code)
                        del id_and_names[game_code]

                        del all_available_tarifs_memes[game_code]
                        del nazat_tarifs_memes[game_code]
                        del all_available_tarifs_sit[game_code]
                        del nazat_tarifs_sit[game_code]
                        del deck_of_sit_cards[game_code]
                        del trash_sit[game_code]
                        del deck_of_meme_cards[game_code]
                        del trash_memes[game_code]

                    markup = types.InlineKeyboardMarkup(row_width=1)
                    new_game_button = types.InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")
                    join_game_button = types.InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="join_game")
                    rules_button = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data="rules")
                    markup.add(new_game_button, join_game_button, rules_button)
                    bot.send_message(player_id, text="–ê –Ω—É-–∫–∞, –≤—ã–±–∏—Ä–∞–π", reply_markup=markup)

                elif len(active_games[game_code]['players']) != kolvo_players_that_send_mem[game_code] and not stop_waiting_meme_chose[game_code]:
                    flag_pl_otpravil[game_code] = []
                    kolvo_players_that_send_mem[game_code] = 0
                    send_message_to_players(game_code,
                                            "–°—Ä–µ–¥–∏ –Ω–∞—Å —Ö–∞–ª—è–≤—â–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å–ø–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º. –ì–æ–ª–æ—Å—É–µ–º –∑–∞ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö!")
                    for pl in players:
                        # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≤–∫–∏–Ω—É–ª –∫–∞—Ä—Ç—É –≤ –∏—Ä—É
                        if pl not in players_order[game_code]:
                            # —É–¥–∞–ª—è–µ–º –µ–≥–æ —Ä—É–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                            bot.delete_message(chat_id = pl, message_id=hands_mes_id[game_code][pl])
                            bot.send_message(pl, "–¢—ã –Ω–µ —É—Å–ø–µ–ª –≤–∫–∏–Ω—É—Ç—å —Å–≤–æ–π –º–µ–º –≤ –∏–≥—Ä—É:(")

                    table(player_id, game_code)

            '''
            timer = threading.Timer(10, delete_edited_message,
                                    args=[player_id, update.callback_query.message.message_id])
            timer.start()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ
            timer_hands[player_id] = timer'''


#–Ω–∞–¥–æ –∫–∞–∫-—Ç–æ —Å–¥–µ–ª–∞—Ç—å —é–æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º, –∞ —Ç–æ —É–Ω —É–º–∏—Ä–∞–µ—Ç —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
bot.polling(none_stop=True, timeout = 31536000)












